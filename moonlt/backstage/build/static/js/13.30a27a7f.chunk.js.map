{"version":3,"sources":["../node_modules/wangeditor/release/wangEditor.js","../node_modules/@ant-design/icons/CheckOutlined.js","../node_modules/@ant-design/icons/lib/icons/CheckOutlined.js","../node_modules/@ant-design/icons-svg/lib/asn/CheckOutlined.js","../node_modules/@ant-design/icons/EyeOutlined.js","../node_modules/@ant-design/icons/lib/icons/EyeOutlined.js","../node_modules/@ant-design/icons-svg/lib/asn/EyeOutlined.js"],"names":["module","exports","isDOMList","selector","HTMLCollection","NodeList","eventList","DomElement","this","nodeType","selectorResult","Array","replace","trim","indexOf","html","div","document","createElement","innerHTML","children","createElemByHTML","result","querySelectorAll","length","i","$","prototype","constructor","forEach","fn","elem","call","clone","deep","cloneList","push","cloneNode","get","index","first","last","on","type","types","split","addEventListener","e","target","matches","off","removeEventListener","attr","key","val","getAttribute","setAttribute","addClass","className","arr","filter","item","join","removeClass","css","currentStyle","style","resultArr","map","show","hide","childNodes","append","$children","child","appendChild","remove","parent","parentElement","removeChild","isContain","$child","contains","getSizeData","getBoundingClientRect","getNodeName","nodeName","find","text","value","focus","parentUntil","_currentElem","results","equal","$elem","insertBefore","$referenceNode","referenceNode","parentNode","insertAfter","lastChild","nextSibling","offAll","config","menus","fontNames","colors","emotions","title","content","alt","src","zIndex","debug","linkCheck","link","linkImgCheck","pasteFilterStyle","pasteIgnoreImg","pasteTextHandle","showLinkImg","linkImgCallback","url","uploadImgMaxSize","uploadImgShowBase64","uploadFileName","uploadImgParams","uploadImgHeaders","withCredentials","uploadImgTimeout","uploadImgHooks","before","xhr","editor","files","success","fail","error","timeout","qiniu","UA","_ua","navigator","userAgent","isWebkit","test","isIE","window","objForEach","obj","hasOwnProperty","arrForEach","fakeArr","getRandom","prefix","Math","random","toString","slice","replaceHtmlSymbol","isFunction","Bold","_active","onClick","isSeleEmpty","selection","isSelectionEmpty","createEmptyRange","cmd","do","collapseRange","restoreSelection","tryChangeActive","queryCommandState","replaceLang","str","langArgs","reg","_emptyFn","DropList","menu","opt","_this","$container","$title","titleHtml","list","$list","elemHtml","$li","hideTimeoutId","setTimeout","_rendered","_show","Head","droplist","width","_command","FontSize","FontName","fontName","clearTimeout","$menuELem","menuHeight","height","showTimeoutId","$selectionElem","getSelectionContainerElem","$textElem","cmdValue","queryCommandValue","emptyFn","_isCreatedPanelMenus","Panel","Link","Italic","Redo","StrikeThrough","Underline","Undo","List","Justify","ForeColor","color","BackColor","Quote","Code","Emoticon","Table","Video","Image","imgMenuId","$body","$textContainerElem","$closeBtn","$tabTitleContainer","$tabContentContainer","tabs","tabTitleArr","tabContentArr","tab","tabIndex","tpl","$content","_index","stopPropagation","events","event","needToHide","$inputs","_hideOtherPanels","panel","$linkelem","createRangeByElem","_createPanel","getSelectionText","inputLinkId","inputTextId","btnOkId","btnDelId","delBtnDisplay","$link","$text","_insertLink","_delLink","$selectionELem","selectionText","checkResult","alert","$parent","$startElem","getSelectionStartElem","$endElem","getSelectionEndElem","$code","textId","btnId","_insertCode","_updateCode","$parentElem","tabConfig","emotData","emotType","faceHtml","$target","insertHtml","_insert","emotHtml","_createEditPanel","_createInsertPanel","btnInsertId","textRowNum","textColNum","rowNum","parseInt","colNum","r","c","_this2","addRowBtnId","addColBtnId","delRowBtnId","delColBtnId","delTableBtnId","_addRow","_addCol","_delRow","_delCol","_delTable","_getLocationData","$tr","$tds","tdLength","td","$tbody","$trs","trLength","tr","locationData","trData","$currentTr","tdData","newTr","tdIndex","$trParent","$currentTd","name","toLowerCase","newTd","$table","textValId","width30","width50","width100","delBtn","tabsConfig","$img","_selectedImg","uploadImg","upTriggerId","upFileId","linkUrlId","linkBtnId","$file","fileElem","click","fileList","$linkUrl","insertLinkImg","tabsConfigResult","uploadImgServer","customUploadImg","FileReader","MenuConstructors","Menus","getPasteText","clipboardData","originalEvent","getData","Text","Command","API","_currentRange","Progress","_time","_isShow","_isRender","_timeoutId","$textContainer","$bar","bold","head","fontSize","italic","redo","strikeThrough","underline","undo","justify","foreColor","backColor","quote","code","emoticon","table","video","image","init","configMenus","menuKey","MenuConstructor","_addToToolbar","_bindEvent","$toolbarElem","getRange","changeActive","clear","initSelection","getJSON","getChildrenJSON","curElem","elemResult","textContent","tag","attrData","attrList","attributes","attrListLength","attrs","_saveRangeRealTime","_enterKeyHandle","_clearHandle","_pasteHandle","_tabHandle","_imgHandle","_dragHandle","saveRange","insertEmptyP","$p","keyCode","pHandle","selectionNodeName","parentNodeName","queryCommandSupported","_willBreakCode","preventDefault","_startOffset","startOffset","codeLength","codeHandle","txtHtml","ignoreImg","pasteTime","canDo","now","Date","flag","pasteHtml","filterStyle","pasteText","docSplitHtml","getPasteHtml","ex","pasteFiles","items","getAsFile","getPasteImgs","$document","dataTransfer","_useStyleWithCSS","execCommand","_name","_execCommand","change","_insertHTML","range","insertNode","deleteContents","pasteHTML","_insertElem","_range","getSelection","rangeCount","getRangeAt","$containerElem","toStart","collapse","commonAncestorContainer","startContainer","endContainer","endOffset","removeAllRanges","addRange","setEnd","isContent","createRange","selectNodeContents","selectNode","progress","timeoutId","_hide","_typeof","Symbol","iterator","UploadImg","_alert","alertInfo","debugInfo","customAlert","Error","img","onload","callback","onerror","onabort","_this3","maxSize","maxSizeM","maxLength","uploadImgMaxLength","uploadImgParamsWithUrl","hooks","resultFiles","errInfo","file","size","bind","formdata","FormData","uploadImgServerArr","uploadImgServerHash","XMLHttpRequest","open","ontimeout","upload","onprogress","percent","progressBar","lengthComputable","loaded","total","onreadystatechange","readyState","status","responseText","JSON","parse","customInsert","errno","data","beforeResult","prevent","msg","setRequestHeader","send","reader","readAsDataURL","editorId","Editor","toolbarSelector","textSelector","id","customConfig","_initConfig","Object","assign","langConfig","lang","RegExp","_initDom","$toolbarSelector","config$$1","toolbarElemId","textElemId","compositionEnd","onfocus","onblur","isFocus","isChild","isToolbar","isMenu","_initCommand","_initSelectionAPI","_initUploadImg","_initMenus","_initText","txt","newLine","$last","onChangeTimeoutId","beforeChangeHtml","onchangeTimeout","onchange","currentHtml","create","_offAllEvent","varArgs","TypeError","to","arguments","nextSource","nextKey","Element","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","ownerDocument","getElementsByTagName","wangEditor","factory","defineProperty","default","_default","__webpack_require__","__esModule","_interopRequireDefault","_interopRequireWildcard","React","_CheckOutlined","_AntdIcon","CheckOutlined","props","ref","icon","displayName","forwardRef","viewBox","focusable","d","theme","_EyeOutlined","EyeOutlined"],"mappings":"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","file":"static/js/13.30a27a7f.chunk.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.wangEditor = factory();\n})(this, function () {\n  'use strict';\n  /*\n      poly-fill\n  */\n\n  var polyfill = function polyfill() {\n    // Object.assign\n    if (typeof Object.assign != 'function') {\n      Object.assign = function (target, varArgs) {\n        // .length of function is 2\n        if (target == null) {\n          // TypeError if undefined or null\n          throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var to = Object(target);\n\n        for (var index = 1; index < arguments.length; index++) {\n          var nextSource = arguments[index];\n\n          if (nextSource != null) {\n            // Skip over if undefined or null\n            for (var nextKey in nextSource) {\n              // Avoid bugs when hasOwnProperty is shadowed\n              if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                to[nextKey] = nextSource[nextKey];\n              }\n            }\n          }\n        }\n\n        return to;\n      };\n    } // IE 中兼容 Element.prototype.matches\n\n\n    if (!Element.prototype.matches) {\n      Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n        var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n            i = matches.length;\n\n        while (--i >= 0 && matches.item(i) !== this) {}\n\n        return i > -1;\n      };\n    }\n  };\n  /*\n      DOM 操作 API\n  */\n  // 根据 html 代码片段创建 dom 对象\n\n\n  function createElemByHTML(html) {\n    var div = void 0;\n    div = document.createElement('div');\n    div.innerHTML = html;\n    return div.children;\n  } // 是否是 DOM List\n\n\n  function isDOMList(selector) {\n    if (!selector) {\n      return false;\n    }\n\n    if (selector instanceof HTMLCollection || selector instanceof NodeList) {\n      return true;\n    }\n\n    return false;\n  } // 封装 document.querySelectorAll\n\n\n  function querySelectorAll(selector) {\n    var result = document.querySelectorAll(selector);\n\n    if (isDOMList(result)) {\n      return result;\n    } else {\n      return [result];\n    }\n  } // 记录所有的事件绑定\n\n\n  var eventList = []; // 创建构造函数\n\n  function DomElement(selector) {\n    if (!selector) {\n      return;\n    } // selector 本来就是 DomElement 对象，直接返回\n\n\n    if (selector instanceof DomElement) {\n      return selector;\n    }\n\n    this.selector = selector;\n    var nodeType = selector.nodeType; // 根据 selector 得出的结果（如 DOM，DOM List）\n\n    var selectorResult = [];\n\n    if (nodeType === 9) {\n      // document 节点\n      selectorResult = [selector];\n    } else if (nodeType === 1) {\n      // 单个 DOM 节点\n      selectorResult = [selector];\n    } else if (isDOMList(selector) || selector instanceof Array) {\n      // DOM List 或者数组\n      selectorResult = selector;\n    } else if (typeof selector === 'string') {\n      // 字符串\n      selector = selector.replace('/\\n/mg', '').trim();\n\n      if (selector.indexOf('<') === 0) {\n        // 如 <div>\n        selectorResult = createElemByHTML(selector);\n      } else {\n        // 如 #id .class\n        selectorResult = querySelectorAll(selector);\n      }\n    }\n\n    var length = selectorResult.length;\n\n    if (!length) {\n      // 空数组\n      return this;\n    } // 加入 DOM 节点\n\n\n    var i = void 0;\n\n    for (i = 0; i < length; i++) {\n      this[i] = selectorResult[i];\n    }\n\n    this.length = length;\n  } // 修改原型\n\n\n  DomElement.prototype = {\n    constructor: DomElement,\n    // 类数组，forEach\n    forEach: function forEach(fn) {\n      var i = void 0;\n\n      for (i = 0; i < this.length; i++) {\n        var elem = this[i];\n        var result = fn.call(elem, elem, i);\n\n        if (result === false) {\n          break;\n        }\n      }\n\n      return this;\n    },\n    // clone\n    clone: function clone(deep) {\n      var cloneList = [];\n      this.forEach(function (elem) {\n        cloneList.push(elem.cloneNode(!!deep));\n      });\n      return $(cloneList);\n    },\n    // 获取第几个元素\n    get: function get(index) {\n      var length = this.length;\n\n      if (index >= length) {\n        index = index % length;\n      }\n\n      return $(this[index]);\n    },\n    // 第一个\n    first: function first() {\n      return this.get(0);\n    },\n    // 最后一个\n    last: function last() {\n      var length = this.length;\n      return this.get(length - 1);\n    },\n    // 绑定事件\n    on: function on(type, selector, fn) {\n      // selector 不为空，证明绑定事件要加代理\n      if (!fn) {\n        fn = selector;\n        selector = null;\n      } // type 是否有多个\n\n\n      var types = [];\n      types = type.split(/\\s+/);\n      return this.forEach(function (elem) {\n        types.forEach(function (type) {\n          if (!type) {\n            return;\n          } // 记录下，方便后面解绑\n\n\n          eventList.push({\n            elem: elem,\n            type: type,\n            fn: fn\n          });\n\n          if (!selector) {\n            // 无代理\n            elem.addEventListener(type, fn);\n            return;\n          } // 有代理\n\n\n          elem.addEventListener(type, function (e) {\n            var target = e.target;\n\n            if (target.matches(selector)) {\n              fn.call(target, e);\n            }\n          });\n        });\n      });\n    },\n    // 取消事件绑定\n    off: function off(type, fn) {\n      return this.forEach(function (elem) {\n        elem.removeEventListener(type, fn);\n      });\n    },\n    // 获取/设置 属性\n    attr: function attr(key, val) {\n      if (val == null) {\n        // 获取值\n        return this[0].getAttribute(key);\n      } else {\n        // 设置值\n        return this.forEach(function (elem) {\n          elem.setAttribute(key, val);\n        });\n      }\n    },\n    // 添加 class\n    addClass: function addClass(className) {\n      if (!className) {\n        return this;\n      }\n\n      return this.forEach(function (elem) {\n        var arr = void 0;\n\n        if (elem.className) {\n          // 解析当前 className 转换为数组\n          arr = elem.className.split(/\\s/);\n          arr = arr.filter(function (item) {\n            return !!item.trim();\n          }); // 添加 class\n\n          if (arr.indexOf(className) < 0) {\n            arr.push(className);\n          } // 修改 elem.class\n\n\n          elem.className = arr.join(' ');\n        } else {\n          elem.className = className;\n        }\n      });\n    },\n    // 删除 class\n    removeClass: function removeClass(className) {\n      if (!className) {\n        return this;\n      }\n\n      return this.forEach(function (elem) {\n        var arr = void 0;\n\n        if (elem.className) {\n          // 解析当前 className 转换为数组\n          arr = elem.className.split(/\\s/);\n          arr = arr.filter(function (item) {\n            item = item.trim(); // 删除 class\n\n            if (!item || item === className) {\n              return false;\n            }\n\n            return true;\n          }); // 修改 elem.class\n\n          elem.className = arr.join(' ');\n        }\n      });\n    },\n    // 修改 css\n    css: function css(key, val) {\n      var currentStyle = key + ':' + val + ';';\n      return this.forEach(function (elem) {\n        var style = (elem.getAttribute('style') || '').trim();\n        var styleArr = void 0,\n            resultArr = [];\n\n        if (style) {\n          // 将 style 按照 ; 拆分为数组\n          styleArr = style.split(';');\n          styleArr.forEach(function (item) {\n            // 对每项样式，按照 : 拆分为 key 和 value\n            var arr = item.split(':').map(function (i) {\n              return i.trim();\n            });\n\n            if (arr.length === 2) {\n              resultArr.push(arr[0] + ':' + arr[1]);\n            }\n          }); // 替换或者新增\n\n          resultArr = resultArr.map(function (item) {\n            if (item.indexOf(key) === 0) {\n              return currentStyle;\n            } else {\n              return item;\n            }\n          });\n\n          if (resultArr.indexOf(currentStyle) < 0) {\n            resultArr.push(currentStyle);\n          } // 结果\n\n\n          elem.setAttribute('style', resultArr.join('; '));\n        } else {\n          // style 无值\n          elem.setAttribute('style', currentStyle);\n        }\n      });\n    },\n    // 显示\n    show: function show() {\n      return this.css('display', 'block');\n    },\n    // 隐藏\n    hide: function hide() {\n      return this.css('display', 'none');\n    },\n    // 获取子节点\n    children: function children() {\n      var elem = this[0];\n\n      if (!elem) {\n        return null;\n      }\n\n      return $(elem.children);\n    },\n    // 获取子节点（包括文本节点）\n    childNodes: function childNodes() {\n      var elem = this[0];\n\n      if (!elem) {\n        return null;\n      }\n\n      return $(elem.childNodes);\n    },\n    // 增加子节点\n    append: function append($children) {\n      return this.forEach(function (elem) {\n        $children.forEach(function (child) {\n          elem.appendChild(child);\n        });\n      });\n    },\n    // 移除当前节点\n    remove: function remove() {\n      return this.forEach(function (elem) {\n        if (elem.remove) {\n          elem.remove();\n        } else {\n          var parent = elem.parentElement;\n          parent && parent.removeChild(elem);\n        }\n      });\n    },\n    // 是否包含某个子节点\n    isContain: function isContain($child) {\n      var elem = this[0];\n      var child = $child[0];\n      return elem.contains(child);\n    },\n    // 尺寸数据\n    getSizeData: function getSizeData() {\n      var elem = this[0];\n      return elem.getBoundingClientRect(); // 可得到 bottom height left right top width 的数据\n    },\n    // 封装 nodeName\n    getNodeName: function getNodeName() {\n      var elem = this[0];\n      return elem.nodeName;\n    },\n    // 从当前元素查找\n    find: function find(selector) {\n      var elem = this[0];\n      return $(elem.querySelectorAll(selector));\n    },\n    // 获取当前元素的 text\n    text: function text(val) {\n      if (!val) {\n        // 获取 text\n        var elem = this[0];\n        return elem.innerHTML.replace(/<.*?>/g, function () {\n          return '';\n        });\n      } else {\n        // 设置 text\n        return this.forEach(function (elem) {\n          elem.innerHTML = val;\n        });\n      }\n    },\n    // 获取 html\n    html: function html(value) {\n      var elem = this[0];\n\n      if (value == null) {\n        return elem.innerHTML;\n      } else {\n        elem.innerHTML = value;\n        return this;\n      }\n    },\n    // 获取 value\n    val: function val() {\n      var elem = this[0];\n      return elem.value.trim();\n    },\n    // focus\n    focus: function focus() {\n      return this.forEach(function (elem) {\n        elem.focus();\n      });\n    },\n    // parent\n    parent: function parent() {\n      var elem = this[0];\n      return $(elem.parentElement);\n    },\n    // parentUntil 找到符合 selector 的父节点\n    parentUntil: function parentUntil(selector, _currentElem) {\n      var results = document.querySelectorAll(selector);\n      var length = results.length;\n\n      if (!length) {\n        // 传入的 selector 无效\n        return null;\n      }\n\n      var elem = _currentElem || this[0];\n\n      if (elem.nodeName === 'BODY') {\n        return null;\n      }\n\n      var parent = elem.parentElement;\n      var i = void 0;\n\n      for (i = 0; i < length; i++) {\n        if (parent === results[i]) {\n          // 找到，并返回\n          return $(parent);\n        }\n      } // 继续查找\n\n\n      return this.parentUntil(selector, parent);\n    },\n    // 判断两个 elem 是否相等\n    equal: function equal($elem) {\n      if ($elem.nodeType === 1) {\n        return this[0] === $elem;\n      } else {\n        return this[0] === $elem[0];\n      }\n    },\n    // 将该元素插入到某个元素前面\n    insertBefore: function insertBefore(selector) {\n      var $referenceNode = $(selector);\n      var referenceNode = $referenceNode[0];\n\n      if (!referenceNode) {\n        return this;\n      }\n\n      return this.forEach(function (elem) {\n        var parent = referenceNode.parentNode;\n        parent.insertBefore(elem, referenceNode);\n      });\n    },\n    // 将该元素插入到某个元素后面\n    insertAfter: function insertAfter(selector) {\n      var $referenceNode = $(selector);\n      var referenceNode = $referenceNode[0];\n\n      if (!referenceNode) {\n        return this;\n      }\n\n      return this.forEach(function (elem) {\n        var parent = referenceNode.parentNode;\n\n        if (parent.lastChild === referenceNode) {\n          // 最后一个元素\n          parent.appendChild(elem);\n        } else {\n          // 不是最后一个元素\n          parent.insertBefore(elem, referenceNode.nextSibling);\n        }\n      });\n    }\n  }; // new 一个对象\n\n  function $(selector) {\n    return new DomElement(selector);\n  } // 解绑所有事件，用于销毁编辑器\n\n\n  $.offAll = function () {\n    eventList.forEach(function (item) {\n      var elem = item.elem;\n      var type = item.type;\n      var fn = item.fn; // 解绑\n\n      elem.removeEventListener(type, fn);\n    });\n  };\n  /*\n      配置信息\n  */\n\n\n  var config = {\n    // 默认菜单配置\n    menus: ['head', 'bold', 'fontSize', 'fontName', 'italic', 'underline', 'strikeThrough', 'foreColor', 'backColor', 'link', 'list', 'justify', 'quote', 'emoticon', 'image', 'table', 'video', 'code', 'undo', 'redo'],\n    fontNames: ['宋体', '微软雅黑', 'Arial', 'Tahoma', 'Verdana'],\n    colors: ['#000000', '#eeece0', '#1c487f', '#4d80bf', '#c24f4a', '#8baa4a', '#7b5ba1', '#46acc8', '#f9963b', '#ffffff'],\n    // // 语言配置\n    // lang: {\n    //     '设置标题': 'title',\n    //     '正文': 'p',\n    //     '链接文字': 'link text',\n    //     '链接': 'link',\n    //     '插入': 'insert',\n    //     '创建': 'init'\n    // },\n    // 表情\n    emotions: [{\n      // tab 的标题\n      title: '默认',\n      // type -> 'emoji' / 'image'\n      type: 'image',\n      // content -> 数组\n      content: [{\n        alt: '[坏笑]',\n        src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/50/pcmoren_huaixiao_org.png'\n      }, {\n        alt: '[舔屏]',\n        src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/40/pcmoren_tian_org.png'\n      }, {\n        alt: '[污]',\n        src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/3c/pcmoren_wu_org.png'\n      }]\n    }, {\n      // tab 的标题\n      title: '新浪',\n      // type -> 'emoji' / 'image'\n      type: 'image',\n      // content -> 数组\n      content: [{\n        src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/7a/shenshou_thumb.gif',\n        alt: '[草泥马]'\n      }, {\n        src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/60/horse2_thumb.gif',\n        alt: '[神马]'\n      }, {\n        src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/bc/fuyun_thumb.gif',\n        alt: '[浮云]'\n      }]\n    }, {\n      // tab 的标题\n      title: 'emoji',\n      // type -> 'emoji' / 'image'\n      type: 'emoji',\n      // content -> 数组\n      content: '😀 😃 😄 😁 😆 😅 😂 😊 😇 🙂 🙃 😉 😓 😪 😴 🙄 🤔 😬 🤐'.split(/\\s/)\n    }],\n    // 编辑区域的 z-index\n    zIndex: 10000,\n    // 是否开启 debug 模式（debug 模式下错误会 throw error 形式抛出）\n    debug: false,\n    // 插入链接时候的格式校验\n    linkCheck: function linkCheck(text, link) {\n      // text 是插入的文字\n      // link 是插入的链接\n      return true; // 返回 true 即表示成功\n      // return '校验失败' // 返回字符串即表示失败的提示信息\n    },\n    // 插入网络图片的校验\n    linkImgCheck: function linkImgCheck(src) {\n      // src 即图片的地址\n      return true; // 返回 true 即表示成功\n      // return '校验失败'  // 返回字符串即表示失败的提示信息\n    },\n    // 粘贴过滤样式，默认开启\n    pasteFilterStyle: true,\n    // 粘贴内容时，忽略图片。默认关闭\n    pasteIgnoreImg: false,\n    // 对粘贴的文字进行自定义处理，返回处理后的结果。编辑器会将处理后的结果粘贴到编辑区域中。\n    // IE 暂时不支持\n    pasteTextHandle: function pasteTextHandle(content) {\n      // content 即粘贴过来的内容（html 或 纯文本），可进行自定义处理然后返回\n      return content;\n    },\n    // onchange 事件\n    // onchange: function (html) {\n    //     // html 即变化之后的内容\n    //     console.log(html)\n    // },\n    // 是否显示添加网络图片的 tab\n    showLinkImg: true,\n    // 插入网络图片的回调\n    linkImgCallback: function linkImgCallback(url) {// console.log(url)  // url 即插入图片的地址\n    },\n    // 默认上传图片 max size: 5M\n    uploadImgMaxSize: 5 * 1024 * 1024,\n    // 配置一次最多上传几个图片\n    // uploadImgMaxLength: 5,\n    // 上传图片，是否显示 base64 格式\n    uploadImgShowBase64: false,\n    // 上传图片，server 地址（如果有值，则 base64 格式的配置则失效）\n    // uploadImgServer: '/upload',\n    // 自定义配置 filename\n    uploadFileName: '',\n    // 上传图片的自定义参数\n    uploadImgParams: {// token: 'abcdef12345'\n    },\n    // 上传图片的自定义header\n    uploadImgHeaders: {// 'Accept': 'text/x-json'\n    },\n    // 配置 XHR withCredentials\n    withCredentials: false,\n    // 自定义上传图片超时时间 ms\n    uploadImgTimeout: 10000,\n    // 上传图片 hook \n    uploadImgHooks: {\n      // customInsert: function (insertLinkImg, result, editor) {\n      //     console.log('customInsert')\n      //     // 图片上传并返回结果，自定义插入图片的事件，而不是编辑器自动插入图片\n      //     const data = result.data1 || []\n      //     data.forEach(link => {\n      //         insertLinkImg(link)\n      //     })\n      // },\n      before: function before(xhr, editor, files) {// 图片上传之前触发\n        // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n        // return {\n        //     prevent: true,\n        //     msg: '放弃上传'\n        // }\n      },\n      success: function success(xhr, editor, result) {// 图片上传并返回结果，图片插入成功之后触发\n      },\n      fail: function fail(xhr, editor, result) {// 图片上传并返回结果，但图片插入错误时触发\n      },\n      error: function error(xhr, editor) {// 图片上传出错时触发\n      },\n      timeout: function timeout(xhr, editor) {// 图片上传超时时触发\n      }\n    },\n    // 是否上传七牛云，默认为 false\n    qiniu: false\n  };\n  /*\n      工具\n  */\n  // 和 UA 相关的属性\n\n  var UA = {\n    _ua: navigator.userAgent,\n    // 是否 webkit\n    isWebkit: function isWebkit() {\n      var reg = /webkit/i;\n      return reg.test(this._ua);\n    },\n    // 是否 IE\n    isIE: function isIE() {\n      return 'ActiveXObject' in window;\n    }\n  }; // 遍历对象\n\n  function objForEach(obj, fn) {\n    var key = void 0,\n        result = void 0;\n\n    for (key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        result = fn.call(obj, key, obj[key]);\n\n        if (result === false) {\n          break;\n        }\n      }\n    }\n  } // 遍历类数组\n\n\n  function arrForEach(fakeArr, fn) {\n    var i = void 0,\n        item = void 0,\n        result = void 0;\n    var length = fakeArr.length || 0;\n\n    for (i = 0; i < length; i++) {\n      item = fakeArr[i];\n      result = fn.call(fakeArr, item, i);\n\n      if (result === false) {\n        break;\n      }\n    }\n  } // 获取随机数\n\n\n  function getRandom(prefix) {\n    return prefix + Math.random().toString().slice(2);\n  } // 替换 html 特殊字符\n\n\n  function replaceHtmlSymbol(html) {\n    if (html == null) {\n      return '';\n    }\n\n    return html.replace(/</gm, '&lt;').replace(/>/gm, '&gt;').replace(/\"/gm, '&quot;').replace(/(\\r\\n|\\r|\\n)/g, '<br/>');\n  } // 返回百分比的格式\n  // 判断是不是 function\n\n\n  function isFunction(fn) {\n    return typeof fn === 'function';\n  }\n  /*\n      bold-menu\n  */\n  // 构造函数\n\n\n  function Bold(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-bold\"></i>\\n        </div>');\n    this.type = 'click'; // 当前是否 active 状态\n\n    this._active = false;\n  } // 原型\n\n\n  Bold.prototype = {\n    constructor: Bold,\n    // 点击事件\n    onClick: function onClick(e) {\n      // 点击菜单将触发这里\n      var editor = this.editor;\n      var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n      if (isSeleEmpty) {\n        // 选区是空的，插入并选中一个“空白”\n        editor.selection.createEmptyRange();\n      } // 执行 bold 命令\n\n\n      editor.cmd.do('bold');\n\n      if (isSeleEmpty) {\n        // 需要将选取折叠起来\n        editor.selection.collapseRange();\n        editor.selection.restoreSelection();\n      }\n    },\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n      var editor = this.editor;\n      var $elem = this.$elem;\n\n      if (editor.cmd.queryCommandState('bold')) {\n        this._active = true;\n        $elem.addClass('w-e-active');\n      } else {\n        this._active = false;\n        $elem.removeClass('w-e-active');\n      }\n    }\n  };\n  /*\n      替换多语言\n   */\n\n  var replaceLang = function replaceLang(editor, str) {\n    var langArgs = editor.config.langArgs || [];\n    var result = str;\n    langArgs.forEach(function (item) {\n      var reg = item.reg;\n      var val = item.val;\n\n      if (reg.test(result)) {\n        result = result.replace(reg, function () {\n          return val;\n        });\n      }\n    });\n    return result;\n  };\n  /*\n      droplist\n  */\n\n\n  var _emptyFn = function _emptyFn() {}; // 构造函数\n\n\n  function DropList(menu, opt) {\n    var _this = this; // droplist 所依附的菜单\n\n\n    var editor = menu.editor;\n    this.menu = menu;\n    this.opt = opt; // 容器\n\n    var $container = $('<div class=\"w-e-droplist\"></div>'); // 标题\n\n    var $title = opt.$title;\n    var titleHtml = void 0;\n\n    if ($title) {\n      // 替换多语言\n      titleHtml = $title.html();\n      titleHtml = replaceLang(editor, titleHtml);\n      $title.html(titleHtml);\n      $title.addClass('w-e-dp-title');\n      $container.append($title);\n    }\n\n    var list = opt.list || [];\n    var type = opt.type || 'list'; // 'list' 列表形式（如“标题”菜单） / 'inline-block' 块状形式（如“颜色”菜单）\n\n    var onClick = opt.onClick || _emptyFn; // 加入 DOM 并绑定事件\n\n    var $list = $('<ul class=\"' + (type === 'list' ? 'w-e-list' : 'w-e-block') + '\"></ul>');\n    $container.append($list);\n    list.forEach(function (item) {\n      var $elem = item.$elem; // 替换多语言\n\n      var elemHtml = $elem.html();\n      elemHtml = replaceLang(editor, elemHtml);\n      $elem.html(elemHtml);\n      var value = item.value;\n      var $li = $('<li class=\"w-e-item\"></li>');\n\n      if ($elem) {\n        $li.append($elem);\n        $list.append($li);\n        $li.on('click', function (e) {\n          onClick(value); // 隐藏\n\n          _this.hideTimeoutId = setTimeout(function () {\n            _this.hide();\n          }, 0);\n        });\n      }\n    }); // 绑定隐藏事件\n\n    $container.on('mouseleave', function (e) {\n      _this.hideTimeoutId = setTimeout(function () {\n        _this.hide();\n      }, 0);\n    }); // 记录属性\n\n    this.$container = $container; // 基本属性\n\n    this._rendered = false;\n    this._show = false;\n  } // 原型\n\n\n  DropList.prototype = {\n    constructor: DropList,\n    // 显示（插入DOM）\n    show: function show() {\n      if (this.hideTimeoutId) {\n        // 清除之前的定时隐藏\n        clearTimeout(this.hideTimeoutId);\n      }\n\n      var menu = this.menu;\n      var $menuELem = menu.$elem;\n      var $container = this.$container;\n\n      if (this._show) {\n        return;\n      }\n\n      if (this._rendered) {\n        // 显示\n        $container.show();\n      } else {\n        // 加入 DOM 之前先定位位置\n        var menuHeight = $menuELem.getSizeData().height || 0;\n        var width = this.opt.width || 100; // 默认为 100\n\n        $container.css('margin-top', menuHeight + 'px').css('width', width + 'px'); // 加入到 DOM\n\n        $menuELem.append($container);\n        this._rendered = true;\n      } // 修改属性\n\n\n      this._show = true;\n    },\n    // 隐藏（移除DOM）\n    hide: function hide() {\n      if (this.showTimeoutId) {\n        // 清除之前的定时显示\n        clearTimeout(this.showTimeoutId);\n      }\n\n      var $container = this.$container;\n\n      if (!this._show) {\n        return;\n      } // 隐藏并需改属性\n\n\n      $container.hide();\n      this._show = false;\n    }\n  };\n  /*\n      menu - header\n  */\n  // 构造函数\n\n  function Head(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-header\"></i></div>');\n    this.type = 'droplist'; // 当前是否 active 状态\n\n    this._active = false; // 初始化 droplist\n\n    this.droplist = new DropList(this, {\n      width: 100,\n      $title: $('<p>设置标题</p>'),\n      type: 'list',\n      // droplist 以列表形式展示\n      list: [{\n        $elem: $('<h1>H1</h1>'),\n        value: '<h1>'\n      }, {\n        $elem: $('<h2>H2</h2>'),\n        value: '<h2>'\n      }, {\n        $elem: $('<h3>H3</h3>'),\n        value: '<h3>'\n      }, {\n        $elem: $('<h4>H4</h4>'),\n        value: '<h4>'\n      }, {\n        $elem: $('<h5>H5</h5>'),\n        value: '<h5>'\n      }, {\n        $elem: $('<p>正文</p>'),\n        value: '<p>'\n      }],\n      onClick: function onClick(value) {\n        // 注意 this 是指向当前的 Head 对象\n        _this._command(value);\n      }\n    });\n  } // 原型\n\n\n  Head.prototype = {\n    constructor: Head,\n    // 执行命令\n    _command: function _command(value) {\n      var editor = this.editor;\n      var $selectionElem = editor.selection.getSelectionContainerElem();\n\n      if (editor.$textElem.equal($selectionElem)) {\n        // 不能选中多行来设置标题，否则会出现问题\n        // 例如选中的是 <p>xxx</p><p>yyy</p> 来设置标题，设置之后会成为 <h1>xxx<br>yyy</h1> 不符合预期\n        return;\n      }\n\n      editor.cmd.do('formatBlock', value);\n    },\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n      var editor = this.editor;\n      var $elem = this.$elem;\n      var reg = /^h/i;\n      var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n\n      if (reg.test(cmdValue)) {\n        this._active = true;\n        $elem.addClass('w-e-active');\n      } else {\n        this._active = false;\n        $elem.removeClass('w-e-active');\n      }\n    }\n  };\n  /*\n      menu - fontSize\n  */\n  // 构造函数\n\n  function FontSize(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-text-heigh\"></i></div>');\n    this.type = 'droplist'; // 当前是否 active 状态\n\n    this._active = false; // 初始化 droplist\n\n    this.droplist = new DropList(this, {\n      width: 160,\n      $title: $('<p>字号</p>'),\n      type: 'list',\n      // droplist 以列表形式展示\n      list: [{\n        $elem: $('<span style=\"font-size: x-small;\">x-small</span>'),\n        value: '1'\n      }, {\n        $elem: $('<span style=\"font-size: small;\">small</span>'),\n        value: '2'\n      }, {\n        $elem: $('<span>normal</span>'),\n        value: '3'\n      }, {\n        $elem: $('<span style=\"font-size: large;\">large</span>'),\n        value: '4'\n      }, {\n        $elem: $('<span style=\"font-size: x-large;\">x-large</span>'),\n        value: '5'\n      }, {\n        $elem: $('<span style=\"font-size: xx-large;\">xx-large</span>'),\n        value: '6'\n      }],\n      onClick: function onClick(value) {\n        // 注意 this 是指向当前的 FontSize 对象\n        _this._command(value);\n      }\n    });\n  } // 原型\n\n\n  FontSize.prototype = {\n    constructor: FontSize,\n    // 执行命令\n    _command: function _command(value) {\n      var editor = this.editor;\n      editor.cmd.do('fontSize', value);\n    }\n  };\n  /*\n      menu - fontName\n  */\n  // 构造函数\n\n  function FontName(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-font\"></i></div>');\n    this.type = 'droplist'; // 当前是否 active 状态\n\n    this._active = false; // 获取配置的字体\n\n    var config = editor.config;\n    var fontNames = config.fontNames || []; // 初始化 droplist\n\n    this.droplist = new DropList(this, {\n      width: 100,\n      $title: $('<p>字体</p>'),\n      type: 'list',\n      // droplist 以列表形式展示\n      list: fontNames.map(function (fontName) {\n        return {\n          $elem: $('<span style=\"font-family: ' + fontName + ';\">' + fontName + '</span>'),\n          value: fontName\n        };\n      }),\n      onClick: function onClick(value) {\n        // 注意 this 是指向当前的 FontName 对象\n        _this._command(value);\n      }\n    });\n  } // 原型\n\n\n  FontName.prototype = {\n    constructor: FontName,\n    _command: function _command(value) {\n      var editor = this.editor;\n      editor.cmd.do('fontName', value);\n    }\n  };\n  /*\n      panel\n  */\n\n  var emptyFn = function emptyFn() {}; // 记录已经显示 panel 的菜单\n\n\n  var _isCreatedPanelMenus = []; // 构造函数\n\n  function Panel(menu, opt) {\n    this.menu = menu;\n    this.opt = opt;\n  } // 原型\n\n\n  Panel.prototype = {\n    constructor: Panel,\n    // 显示（插入DOM）\n    show: function show() {\n      var _this = this;\n\n      var menu = this.menu;\n\n      if (_isCreatedPanelMenus.indexOf(menu) >= 0) {\n        // 该菜单已经创建了 panel 不能再创建\n        return;\n      }\n\n      var editor = menu.editor;\n      var $body = $('body');\n      var $textContainerElem = editor.$textContainerElem;\n      var opt = this.opt; // panel 的容器\n\n      var $container = $('<div class=\"w-e-panel-container\"></div>');\n      var width = opt.width || 300; // 默认 300px\n\n      $container.css('width', width + 'px').css('margin-left', (0 - width) / 2 + 'px'); // 添加关闭按钮\n\n      var $closeBtn = $('<i class=\"w-e-icon-close w-e-panel-close\"></i>');\n      $container.append($closeBtn);\n      $closeBtn.on('click', function () {\n        _this.hide();\n      }); // 准备 tabs 容器\n\n      var $tabTitleContainer = $('<ul class=\"w-e-panel-tab-title\"></ul>');\n      var $tabContentContainer = $('<div class=\"w-e-panel-tab-content\"></div>');\n      $container.append($tabTitleContainer).append($tabContentContainer); // 设置高度\n\n      var height = opt.height;\n\n      if (height) {\n        $tabContentContainer.css('height', height + 'px').css('overflow-y', 'auto');\n      } // tabs\n\n\n      var tabs = opt.tabs || [];\n      var tabTitleArr = [];\n      var tabContentArr = [];\n      tabs.forEach(function (tab, tabIndex) {\n        if (!tab) {\n          return;\n        }\n\n        var title = tab.title || '';\n        var tpl = tab.tpl || ''; // 替换多语言\n\n        title = replaceLang(editor, title);\n        tpl = replaceLang(editor, tpl); // 添加到 DOM\n\n        var $title = $('<li class=\"w-e-item\">' + title + '</li>');\n        $tabTitleContainer.append($title);\n        var $content = $(tpl);\n        $tabContentContainer.append($content); // 记录到内存\n\n        $title._index = tabIndex;\n        tabTitleArr.push($title);\n        tabContentArr.push($content); // 设置 active 项\n\n        if (tabIndex === 0) {\n          $title._active = true;\n          $title.addClass('w-e-active');\n        } else {\n          $content.hide();\n        } // 绑定 tab 的事件\n\n\n        $title.on('click', function (e) {\n          if ($title._active) {\n            return;\n          } // 隐藏所有的 tab\n\n\n          tabTitleArr.forEach(function ($title) {\n            $title._active = false;\n            $title.removeClass('w-e-active');\n          });\n          tabContentArr.forEach(function ($content) {\n            $content.hide();\n          }); // 显示当前的 tab\n\n          $title._active = true;\n          $title.addClass('w-e-active');\n          $content.show();\n        });\n      }); // 绑定关闭事件\n\n      $container.on('click', function (e) {\n        // 点击时阻止冒泡\n        e.stopPropagation();\n      });\n      $body.on('click', function (e) {\n        _this.hide();\n      }); // 添加到 DOM\n\n      $textContainerElem.append($container); // 绑定 opt 的事件，只有添加到 DOM 之后才能绑定成功\n\n      tabs.forEach(function (tab, index) {\n        if (!tab) {\n          return;\n        }\n\n        var events = tab.events || [];\n        events.forEach(function (event) {\n          var selector = event.selector;\n          var type = event.type;\n          var fn = event.fn || emptyFn;\n          var $content = tabContentArr[index];\n          $content.find(selector).on(type, function (e) {\n            e.stopPropagation();\n            var needToHide = fn(e); // 执行完事件之后，是否要关闭 panel\n\n            if (needToHide) {\n              _this.hide();\n            }\n          });\n        });\n      }); // focus 第一个 elem\n\n      var $inputs = $container.find('input[type=text],textarea');\n\n      if ($inputs.length) {\n        $inputs.get(0).focus();\n      } // 添加到属性\n\n\n      this.$container = $container; // 隐藏其他 panel\n\n      this._hideOtherPanels(); // 记录该 menu 已经创建了 panel\n\n\n      _isCreatedPanelMenus.push(menu);\n    },\n    // 隐藏（移除DOM）\n    hide: function hide() {\n      var menu = this.menu;\n      var $container = this.$container;\n\n      if ($container) {\n        $container.remove();\n      } // 将该 menu 记录中移除\n\n\n      _isCreatedPanelMenus = _isCreatedPanelMenus.filter(function (item) {\n        if (item === menu) {\n          return false;\n        } else {\n          return true;\n        }\n      });\n    },\n    // 一个 panel 展示时，隐藏其他 panel\n    _hideOtherPanels: function _hideOtherPanels() {\n      if (!_isCreatedPanelMenus.length) {\n        return;\n      }\n\n      _isCreatedPanelMenus.forEach(function (menu) {\n        var panel = menu.panel || {};\n\n        if (panel.hide) {\n          panel.hide();\n        }\n      });\n    }\n  };\n  /*\n      menu - link\n  */\n  // 构造函数\n\n  function Link(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-link\"></i></div>');\n    this.type = 'panel'; // 当前是否 active 状态\n\n    this._active = false;\n  } // 原型\n\n\n  Link.prototype = {\n    constructor: Link,\n    // 点击事件\n    onClick: function onClick(e) {\n      var editor = this.editor;\n      var $linkelem = void 0;\n\n      if (this._active) {\n        // 当前选区在链接里面\n        $linkelem = editor.selection.getSelectionContainerElem();\n\n        if (!$linkelem) {\n          return;\n        } // 将该元素都包含在选取之内，以便后面整体替换\n\n\n        editor.selection.createRangeByElem($linkelem);\n        editor.selection.restoreSelection(); // 显示 panel\n\n        this._createPanel($linkelem.text(), $linkelem.attr('href'));\n      } else {\n        // 当前选区不在链接里面\n        if (editor.selection.isSelectionEmpty()) {\n          // 选区是空的，未选中内容\n          this._createPanel('', '');\n        } else {\n          // 选中内容了\n          this._createPanel(editor.selection.getSelectionText(), '');\n        }\n      }\n    },\n    // 创建 panel\n    _createPanel: function _createPanel(text, link) {\n      var _this = this; // panel 中需要用到的id\n\n\n      var inputLinkId = getRandom('input-link');\n      var inputTextId = getRandom('input-text');\n      var btnOkId = getRandom('btn-ok');\n      var btnDelId = getRandom('btn-del'); // 是否显示“删除链接”\n\n      var delBtnDisplay = this._active ? 'inline-block' : 'none'; // 初始化并显示 panel\n\n      var panel = new Panel(this, {\n        width: 300,\n        // panel 中可包含多个 tab\n        tabs: [{\n          // tab 的标题\n          title: '链接',\n          // 模板\n          tpl: '<div>\\n                            <input id=\"' + inputTextId + '\" type=\"text\" class=\"block\" value=\"' + text + \"\\\" placeholder=\\\"\\u94FE\\u63A5\\u6587\\u5B57\\\"/></td>\\n                            <input id=\\\"\" + inputLinkId + '\" type=\"text\" class=\"block\" value=\"' + link + '\" placeholder=\"http://...\"/></td>\\n                            <div class=\"w-e-button-container\">\\n                                <button id=\"' + btnOkId + \"\\\" class=\\\"right\\\">\\u63D2\\u5165</button>\\n                                <button id=\\\"\" + btnDelId + '\" class=\"gray right\" style=\"display:' + delBtnDisplay + \"\\\">\\u5220\\u9664\\u94FE\\u63A5</button>\\n                            </div>\\n                        </div>\",\n          // 事件绑定\n          events: [// 插入链接\n          {\n            selector: '#' + btnOkId,\n            type: 'click',\n            fn: function fn() {\n              // 执行插入链接\n              var $link = $('#' + inputLinkId);\n              var $text = $('#' + inputTextId);\n              var link = $link.val();\n              var text = $text.val();\n\n              _this._insertLink(text, link); // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\n\n              return true;\n            }\n          }, // 删除链接\n          {\n            selector: '#' + btnDelId,\n            type: 'click',\n            fn: function fn() {\n              // 执行删除链接\n              _this._delLink(); // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\n\n              return true;\n            }\n          }] // tab end\n\n        }] // tabs end\n\n      }); // 显示 panel\n\n      panel.show(); // 记录属性\n\n      this.panel = panel;\n    },\n    // 删除当前链接\n    _delLink: function _delLink() {\n      if (!this._active) {\n        return;\n      }\n\n      var editor = this.editor;\n      var $selectionELem = editor.selection.getSelectionContainerElem();\n\n      if (!$selectionELem) {\n        return;\n      }\n\n      var selectionText = editor.selection.getSelectionText();\n      editor.cmd.do('insertHTML', '<span>' + selectionText + '</span>');\n    },\n    // 插入链接\n    _insertLink: function _insertLink(text, link) {\n      var editor = this.editor;\n      var config = editor.config;\n      var linkCheck = config.linkCheck;\n      var checkResult = true; // 默认为 true\n\n      if (linkCheck && typeof linkCheck === 'function') {\n        checkResult = linkCheck(text, link);\n      }\n\n      if (checkResult === true) {\n        editor.cmd.do('insertHTML', '<a href=\"' + link + '\" target=\"_blank\">' + text + '</a>');\n      } else {\n        alert(checkResult);\n      }\n    },\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n      var editor = this.editor;\n      var $elem = this.$elem;\n      var $selectionELem = editor.selection.getSelectionContainerElem();\n\n      if (!$selectionELem) {\n        return;\n      }\n\n      if ($selectionELem.getNodeName() === 'A') {\n        this._active = true;\n        $elem.addClass('w-e-active');\n      } else {\n        this._active = false;\n        $elem.removeClass('w-e-active');\n      }\n    }\n  };\n  /*\n      italic-menu\n  */\n  // 构造函数\n\n  function Italic(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-italic\"></i>\\n        </div>');\n    this.type = 'click'; // 当前是否 active 状态\n\n    this._active = false;\n  } // 原型\n\n\n  Italic.prototype = {\n    constructor: Italic,\n    // 点击事件\n    onClick: function onClick(e) {\n      // 点击菜单将触发这里\n      var editor = this.editor;\n      var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n      if (isSeleEmpty) {\n        // 选区是空的，插入并选中一个“空白”\n        editor.selection.createEmptyRange();\n      } // 执行 italic 命令\n\n\n      editor.cmd.do('italic');\n\n      if (isSeleEmpty) {\n        // 需要将选取折叠起来\n        editor.selection.collapseRange();\n        editor.selection.restoreSelection();\n      }\n    },\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n      var editor = this.editor;\n      var $elem = this.$elem;\n\n      if (editor.cmd.queryCommandState('italic')) {\n        this._active = true;\n        $elem.addClass('w-e-active');\n      } else {\n        this._active = false;\n        $elem.removeClass('w-e-active');\n      }\n    }\n  };\n  /*\n      redo-menu\n  */\n  // 构造函数\n\n  function Redo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-redo\"></i>\\n        </div>');\n    this.type = 'click'; // 当前是否 active 状态\n\n    this._active = false;\n  } // 原型\n\n\n  Redo.prototype = {\n    constructor: Redo,\n    // 点击事件\n    onClick: function onClick(e) {\n      // 点击菜单将触发这里\n      var editor = this.editor; // 执行 redo 命令\n\n      editor.cmd.do('redo');\n    }\n  };\n  /*\n      strikeThrough-menu\n  */\n  // 构造函数\n\n  function StrikeThrough(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-strikethrough\"></i>\\n        </div>');\n    this.type = 'click'; // 当前是否 active 状态\n\n    this._active = false;\n  } // 原型\n\n\n  StrikeThrough.prototype = {\n    constructor: StrikeThrough,\n    // 点击事件\n    onClick: function onClick(e) {\n      // 点击菜单将触发这里\n      var editor = this.editor;\n      var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n      if (isSeleEmpty) {\n        // 选区是空的，插入并选中一个“空白”\n        editor.selection.createEmptyRange();\n      } // 执行 strikeThrough 命令\n\n\n      editor.cmd.do('strikeThrough');\n\n      if (isSeleEmpty) {\n        // 需要将选取折叠起来\n        editor.selection.collapseRange();\n        editor.selection.restoreSelection();\n      }\n    },\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n      var editor = this.editor;\n      var $elem = this.$elem;\n\n      if (editor.cmd.queryCommandState('strikeThrough')) {\n        this._active = true;\n        $elem.addClass('w-e-active');\n      } else {\n        this._active = false;\n        $elem.removeClass('w-e-active');\n      }\n    }\n  };\n  /*\n      underline-menu\n  */\n  // 构造函数\n\n  function Underline(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-underline\"></i>\\n        </div>');\n    this.type = 'click'; // 当前是否 active 状态\n\n    this._active = false;\n  } // 原型\n\n\n  Underline.prototype = {\n    constructor: Underline,\n    // 点击事件\n    onClick: function onClick(e) {\n      // 点击菜单将触发这里\n      var editor = this.editor;\n      var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n      if (isSeleEmpty) {\n        // 选区是空的，插入并选中一个“空白”\n        editor.selection.createEmptyRange();\n      } // 执行 underline 命令\n\n\n      editor.cmd.do('underline');\n\n      if (isSeleEmpty) {\n        // 需要将选取折叠起来\n        editor.selection.collapseRange();\n        editor.selection.restoreSelection();\n      }\n    },\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n      var editor = this.editor;\n      var $elem = this.$elem;\n\n      if (editor.cmd.queryCommandState('underline')) {\n        this._active = true;\n        $elem.addClass('w-e-active');\n      } else {\n        this._active = false;\n        $elem.removeClass('w-e-active');\n      }\n    }\n  };\n  /*\n      undo-menu\n  */\n  // 构造函数\n\n  function Undo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-undo\"></i>\\n        </div>');\n    this.type = 'click'; // 当前是否 active 状态\n\n    this._active = false;\n  } // 原型\n\n\n  Undo.prototype = {\n    constructor: Undo,\n    // 点击事件\n    onClick: function onClick(e) {\n      // 点击菜单将触发这里\n      var editor = this.editor; // 执行 undo 命令\n\n      editor.cmd.do('undo');\n    }\n  };\n  /*\n      menu - list\n  */\n  // 构造函数\n\n  function List(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-list2\"></i></div>');\n    this.type = 'droplist'; // 当前是否 active 状态\n\n    this._active = false; // 初始化 droplist\n\n    this.droplist = new DropList(this, {\n      width: 120,\n      $title: $('<p>设置列表</p>'),\n      type: 'list',\n      // droplist 以列表形式展示\n      list: [{\n        $elem: $('<span><i class=\"w-e-icon-list-numbered\"></i> 有序列表</span>'),\n        value: 'insertOrderedList'\n      }, {\n        $elem: $('<span><i class=\"w-e-icon-list2\"></i> 无序列表</span>'),\n        value: 'insertUnorderedList'\n      }],\n      onClick: function onClick(value) {\n        // 注意 this 是指向当前的 List 对象\n        _this._command(value);\n      }\n    });\n  } // 原型\n\n\n  List.prototype = {\n    constructor: List,\n    // 执行命令\n    _command: function _command(value) {\n      var editor = this.editor;\n      var $textElem = editor.$textElem;\n      editor.selection.restoreSelection();\n\n      if (editor.cmd.queryCommandState(value)) {\n        return;\n      }\n\n      editor.cmd.do(value); // 验证列表是否被包裹在 <p> 之内\n\n      var $selectionElem = editor.selection.getSelectionContainerElem();\n\n      if ($selectionElem.getNodeName() === 'LI') {\n        $selectionElem = $selectionElem.parent();\n      }\n\n      if (/^ol|ul$/i.test($selectionElem.getNodeName()) === false) {\n        return;\n      }\n\n      if ($selectionElem.equal($textElem)) {\n        // 证明是顶级标签，没有被 <p> 包裹\n        return;\n      }\n\n      var $parent = $selectionElem.parent();\n\n      if ($parent.equal($textElem)) {\n        // $parent 是顶级标签，不能删除\n        return;\n      }\n\n      $selectionElem.insertAfter($parent);\n      $parent.remove();\n    },\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n      var editor = this.editor;\n      var $elem = this.$elem;\n\n      if (editor.cmd.queryCommandState('insertUnOrderedList') || editor.cmd.queryCommandState('insertOrderedList')) {\n        this._active = true;\n        $elem.addClass('w-e-active');\n      } else {\n        this._active = false;\n        $elem.removeClass('w-e-active');\n      }\n    }\n  };\n  /*\n      menu - justify\n  */\n  // 构造函数\n\n  function Justify(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paragraph-left\"></i></div>');\n    this.type = 'droplist'; // 当前是否 active 状态\n\n    this._active = false; // 初始化 droplist\n\n    this.droplist = new DropList(this, {\n      width: 100,\n      $title: $('<p>对齐方式</p>'),\n      type: 'list',\n      // droplist 以列表形式展示\n      list: [{\n        $elem: $('<span><i class=\"w-e-icon-paragraph-left\"></i> 靠左</span>'),\n        value: 'justifyLeft'\n      }, {\n        $elem: $('<span><i class=\"w-e-icon-paragraph-center\"></i> 居中</span>'),\n        value: 'justifyCenter'\n      }, {\n        $elem: $('<span><i class=\"w-e-icon-paragraph-right\"></i> 靠右</span>'),\n        value: 'justifyRight'\n      }],\n      onClick: function onClick(value) {\n        // 注意 this 是指向当前的 List 对象\n        _this._command(value);\n      }\n    });\n  } // 原型\n\n\n  Justify.prototype = {\n    constructor: Justify,\n    // 执行命令\n    _command: function _command(value) {\n      var editor = this.editor;\n      editor.cmd.do(value);\n    }\n  };\n  /*\n      menu - Forecolor\n  */\n  // 构造函数\n\n  function ForeColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-pencil2\"></i></div>');\n    this.type = 'droplist'; // 获取配置的颜色\n\n    var config = editor.config;\n    var colors = config.colors || []; // 当前是否 active 状态\n\n    this._active = false; // 初始化 droplist\n\n    this.droplist = new DropList(this, {\n      width: 120,\n      $title: $('<p>文字颜色</p>'),\n      type: 'inline-block',\n      // droplist 内容以 block 形式展示\n      list: colors.map(function (color) {\n        return {\n          $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-pencil2\"></i>'),\n          value: color\n        };\n      }),\n      onClick: function onClick(value) {\n        // 注意 this 是指向当前的 ForeColor 对象\n        _this._command(value);\n      }\n    });\n  } // 原型\n\n\n  ForeColor.prototype = {\n    constructor: ForeColor,\n    // 执行命令\n    _command: function _command(value) {\n      var editor = this.editor;\n      editor.cmd.do('foreColor', value);\n    }\n  };\n  /*\n      menu - BackColor\n  */\n  // 构造函数\n\n  function BackColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paint-brush\"></i></div>');\n    this.type = 'droplist'; // 获取配置的颜色\n\n    var config = editor.config;\n    var colors = config.colors || []; // 当前是否 active 状态\n\n    this._active = false; // 初始化 droplist\n\n    this.droplist = new DropList(this, {\n      width: 120,\n      $title: $('<p>背景色</p>'),\n      type: 'inline-block',\n      // droplist 内容以 block 形式展示\n      list: colors.map(function (color) {\n        return {\n          $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-paint-brush\"></i>'),\n          value: color\n        };\n      }),\n      onClick: function onClick(value) {\n        // 注意 this 是指向当前的 BackColor 对象\n        _this._command(value);\n      }\n    });\n  } // 原型\n\n\n  BackColor.prototype = {\n    constructor: BackColor,\n    // 执行命令\n    _command: function _command(value) {\n      var editor = this.editor;\n      editor.cmd.do('backColor', value);\n    }\n  };\n  /*\n      menu - quote\n  */\n  // 构造函数\n\n  function Quote(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-quotes-left\"></i>\\n        </div>');\n    this.type = 'click'; // 当前是否 active 状态\n\n    this._active = false;\n  } // 原型\n\n\n  Quote.prototype = {\n    constructor: Quote,\n    onClick: function onClick(e) {\n      var editor = this.editor;\n      var $selectionElem = editor.selection.getSelectionContainerElem();\n      var nodeName = $selectionElem.getNodeName();\n\n      if (!UA.isIE()) {\n        if (nodeName === 'BLOCKQUOTE') {\n          // 撤销 quote\n          editor.cmd.do('formatBlock', '<P>');\n        } else {\n          // 转换为 quote\n          editor.cmd.do('formatBlock', '<BLOCKQUOTE>');\n        }\n\n        return;\n      } // IE 中不支持 formatBlock <BLOCKQUOTE> ，要用其他方式兼容\n\n\n      var content = void 0,\n          $targetELem = void 0;\n\n      if (nodeName === 'P') {\n        // 将 P 转换为 quote\n        content = $selectionElem.text();\n        $targetELem = $('<blockquote>' + content + '</blockquote>');\n        $targetELem.insertAfter($selectionElem);\n        $selectionElem.remove();\n        return;\n      }\n\n      if (nodeName === 'BLOCKQUOTE') {\n        // 撤销 quote\n        content = $selectionElem.text();\n        $targetELem = $('<p>' + content + '</p>');\n        $targetELem.insertAfter($selectionElem);\n        $selectionElem.remove();\n      }\n    },\n    tryChangeActive: function tryChangeActive(e) {\n      var editor = this.editor;\n      var $elem = this.$elem;\n      var reg = /^BLOCKQUOTE$/i;\n      var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n\n      if (reg.test(cmdValue)) {\n        this._active = true;\n        $elem.addClass('w-e-active');\n      } else {\n        this._active = false;\n        $elem.removeClass('w-e-active');\n      }\n    }\n  };\n  /*\n      menu - code\n  */\n  // 构造函数\n\n  function Code(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-terminal\"></i>\\n        </div>');\n    this.type = 'panel'; // 当前是否 active 状态\n\n    this._active = false;\n  } // 原型\n\n\n  Code.prototype = {\n    constructor: Code,\n    onClick: function onClick(e) {\n      var editor = this.editor;\n      var $startElem = editor.selection.getSelectionStartElem();\n      var $endElem = editor.selection.getSelectionEndElem();\n      var isSeleEmpty = editor.selection.isSelectionEmpty();\n      var selectionText = editor.selection.getSelectionText();\n      var $code = void 0;\n\n      if (!$startElem.equal($endElem)) {\n        // 跨元素选择，不做处理\n        editor.selection.restoreSelection();\n        return;\n      }\n\n      if (!isSeleEmpty) {\n        // 选取不是空，用 <code> 包裹即可\n        $code = $('<code>' + selectionText + '</code>');\n        editor.cmd.do('insertElem', $code);\n        editor.selection.createRangeByElem($code, false);\n        editor.selection.restoreSelection();\n        return;\n      } // 选取是空，且没有夸元素选择，则插入 <pre><code></code></prev>\n\n\n      if (this._active) {\n        // 选中状态，将编辑内容\n        this._createPanel($startElem.html());\n      } else {\n        // 未选中状态，将创建内容\n        this._createPanel();\n      }\n    },\n    _createPanel: function _createPanel(value) {\n      var _this = this; // value - 要编辑的内容\n\n\n      value = value || '';\n      var type = !value ? 'new' : 'edit';\n      var textId = getRandom('texxt');\n      var btnId = getRandom('btn');\n      var panel = new Panel(this, {\n        width: 500,\n        // 一个 Panel 包含多个 tab\n        tabs: [{\n          // 标题\n          title: '插入代码',\n          // 模板\n          tpl: '<div>\\n                        <textarea id=\"' + textId + '\" style=\"height:145px;;\">' + value + '</textarea>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + \"\\\" class=\\\"right\\\">\\u63D2\\u5165</button>\\n                        </div>\\n                    <div>\",\n          // 事件绑定\n          events: [// 插入代码\n          {\n            selector: '#' + btnId,\n            type: 'click',\n            fn: function fn() {\n              var $text = $('#' + textId);\n              var text = $text.val() || $text.html();\n              text = replaceHtmlSymbol(text);\n\n              if (type === 'new') {\n                // 新插入\n                _this._insertCode(text);\n              } else {\n                // 编辑更新\n                _this._updateCode(text);\n              } // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\n\n              return true;\n            }\n          }] // first tab end\n\n        }] // tabs end\n\n      }); // new Panel end\n      // 显示 panel\n\n      panel.show(); // 记录属性\n\n      this.panel = panel;\n    },\n    // 插入代码\n    _insertCode: function _insertCode(value) {\n      var editor = this.editor;\n      editor.cmd.do('insertHTML', '<pre><code>' + value + '</code></pre><p><br></p>');\n    },\n    // 更新代码\n    _updateCode: function _updateCode(value) {\n      var editor = this.editor;\n      var $selectionELem = editor.selection.getSelectionContainerElem();\n\n      if (!$selectionELem) {\n        return;\n      }\n\n      $selectionELem.html(value);\n      editor.selection.restoreSelection();\n    },\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n      var editor = this.editor;\n      var $elem = this.$elem;\n      var $selectionELem = editor.selection.getSelectionContainerElem();\n\n      if (!$selectionELem) {\n        return;\n      }\n\n      var $parentElem = $selectionELem.parent();\n\n      if ($selectionELem.getNodeName() === 'CODE' && $parentElem.getNodeName() === 'PRE') {\n        this._active = true;\n        $elem.addClass('w-e-active');\n      } else {\n        this._active = false;\n        $elem.removeClass('w-e-active');\n      }\n    }\n  };\n  /*\n      menu - emoticon\n  */\n  // 构造函数\n\n  function Emoticon(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-happy\"></i>\\n        </div>');\n    this.type = 'panel'; // 当前是否 active 状态\n\n    this._active = false;\n  } // 原型\n\n\n  Emoticon.prototype = {\n    constructor: Emoticon,\n    onClick: function onClick() {\n      this._createPanel();\n    },\n    _createPanel: function _createPanel() {\n      var _this = this;\n\n      var editor = this.editor;\n      var config = editor.config; // 获取表情配置\n\n      var emotions = config.emotions || []; // 创建表情 dropPanel 的配置\n\n      var tabConfig = [];\n      emotions.forEach(function (emotData) {\n        var emotType = emotData.type;\n        var content = emotData.content || []; // 这一组表情最终拼接出来的 html\n\n        var faceHtml = ''; // emoji 表情\n\n        if (emotType === 'emoji') {\n          content.forEach(function (item) {\n            if (item) {\n              faceHtml += '<span class=\"w-e-item\">' + item + '</span>';\n            }\n          });\n        } // 图片表情\n\n\n        if (emotType === 'image') {\n          content.forEach(function (item) {\n            var src = item.src;\n            var alt = item.alt;\n\n            if (src) {\n              // 加一个 data-w-e 属性，点击图片的时候不再提示编辑图片\n              faceHtml += '<span class=\"w-e-item\"><img src=\"' + src + '\" alt=\"' + alt + '\" data-w-e=\"1\"/></span>';\n            }\n          });\n        }\n\n        tabConfig.push({\n          title: emotData.title,\n          tpl: '<div class=\"w-e-emoticon-container\">' + faceHtml + '</div>',\n          events: [{\n            selector: 'span.w-e-item',\n            type: 'click',\n            fn: function fn(e) {\n              var target = e.target;\n              var $target = $(target);\n              var nodeName = $target.getNodeName();\n              var insertHtml = void 0;\n\n              if (nodeName === 'IMG') {\n                // 插入图片\n                insertHtml = $target.parent().html();\n              } else {\n                // 插入 emoji\n                insertHtml = '<span>' + $target.html() + '</span>';\n              }\n\n              _this._insert(insertHtml); // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\n\n              return true;\n            }\n          }]\n        });\n      });\n      var panel = new Panel(this, {\n        width: 300,\n        height: 200,\n        // 一个 Panel 包含多个 tab\n        tabs: tabConfig\n      }); // 显示 panel\n\n      panel.show(); // 记录属性\n\n      this.panel = panel;\n    },\n    // 插入表情\n    _insert: function _insert(emotHtml) {\n      var editor = this.editor;\n      editor.cmd.do('insertHTML', emotHtml);\n    }\n  };\n  /*\n      menu - table\n  */\n  // 构造函数\n\n  function Table(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-table2\"></i></div>');\n    this.type = 'panel'; // 当前是否 active 状态\n\n    this._active = false;\n  } // 原型\n\n\n  Table.prototype = {\n    constructor: Table,\n    onClick: function onClick() {\n      if (this._active) {\n        // 编辑现有表格\n        this._createEditPanel();\n      } else {\n        // 插入新表格\n        this._createInsertPanel();\n      }\n    },\n    // 创建插入新表格的 panel\n    _createInsertPanel: function _createInsertPanel() {\n      var _this = this; // 用到的 id\n\n\n      var btnInsertId = getRandom('btn');\n      var textRowNum = getRandom('row');\n      var textColNum = getRandom('col');\n      var panel = new Panel(this, {\n        width: 250,\n        // panel 包含多个 tab\n        tabs: [{\n          // 标题\n          title: '插入表格',\n          // 模板\n          tpl: \"<div>\\n                        <p style=\\\"text-align:left; padding:5px 0;\\\">\\n                            \\u521B\\u5EFA\\n                            <input id=\\\"\" + textRowNum + \"\\\" type=\\\"text\\\" value=\\\"5\\\" style=\\\"width:40px;text-align:center;\\\"/>\\n                            \\u884C\\n                            <input id=\\\"\" + textColNum + \"\\\" type=\\\"text\\\" value=\\\"5\\\" style=\\\"width:40px;text-align:center;\\\"/>\\n                            \\u5217\\u7684\\u8868\\u683C\\n                        </p>\\n                        <div class=\\\"w-e-button-container\\\">\\n                            <button id=\\\"\" + btnInsertId + \"\\\" class=\\\"right\\\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>\",\n          // 事件绑定\n          events: [{\n            // 点击按钮，插入表格\n            selector: '#' + btnInsertId,\n            type: 'click',\n            fn: function fn() {\n              var rowNum = parseInt($('#' + textRowNum).val());\n              var colNum = parseInt($('#' + textColNum).val());\n\n              if (rowNum && colNum && rowNum > 0 && colNum > 0) {\n                // form 数据有效\n                _this._insert(rowNum, colNum);\n              } // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\n\n              return true;\n            }\n          }] // first tab end\n\n        }] // tabs end\n\n      }); // panel end\n      // 展示 panel\n\n      panel.show(); // 记录属性\n\n      this.panel = panel;\n    },\n    // 插入表格\n    _insert: function _insert(rowNum, colNum) {\n      // 拼接 table 模板\n      var r = void 0,\n          c = void 0;\n      var html = '<table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">';\n\n      for (r = 0; r < rowNum; r++) {\n        html += '<tr>';\n\n        if (r === 0) {\n          for (c = 0; c < colNum; c++) {\n            html += '<th>&nbsp;</th>';\n          }\n        } else {\n          for (c = 0; c < colNum; c++) {\n            html += '<td>&nbsp;</td>';\n          }\n        }\n\n        html += '</tr>';\n      }\n\n      html += '</table><p><br></p>'; // 执行命令\n\n      var editor = this.editor;\n      editor.cmd.do('insertHTML', html); // 防止 firefox 下出现 resize 的控制点\n\n      editor.cmd.do('enableObjectResizing', false);\n      editor.cmd.do('enableInlineTableEditing', false);\n    },\n    // 创建编辑表格的 panel\n    _createEditPanel: function _createEditPanel() {\n      var _this2 = this; // 可用的 id\n\n\n      var addRowBtnId = getRandom('add-row');\n      var addColBtnId = getRandom('add-col');\n      var delRowBtnId = getRandom('del-row');\n      var delColBtnId = getRandom('del-col');\n      var delTableBtnId = getRandom('del-table'); // 创建 panel 对象\n\n      var panel = new Panel(this, {\n        width: 320,\n        // panel 包含多个 tab\n        tabs: [{\n          // 标题\n          title: '编辑表格',\n          // 模板\n          tpl: '<div>\\n                        <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                            <button id=\"' + addRowBtnId + \"\\\" class=\\\"left\\\">\\u589E\\u52A0\\u884C</button>\\n                            <button id=\\\"\" + delRowBtnId + \"\\\" class=\\\"red left\\\">\\u5220\\u9664\\u884C</button>\\n                            <button id=\\\"\" + addColBtnId + \"\\\" class=\\\"left\\\">\\u589E\\u52A0\\u5217</button>\\n                            <button id=\\\"\" + delColBtnId + \"\\\" class=\\\"red left\\\">\\u5220\\u9664\\u5217</button>\\n                        </div>\\n                        <div class=\\\"w-e-button-container\\\">\\n                            <button id=\\\"\" + delTableBtnId + \"\\\" class=\\\"gray left\\\">\\u5220\\u9664\\u8868\\u683C</button>\\n                        </dv>\\n                    </div>\",\n          // 事件绑定\n          events: [{\n            // 增加行\n            selector: '#' + addRowBtnId,\n            type: 'click',\n            fn: function fn() {\n              _this2._addRow(); // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\n\n              return true;\n            }\n          }, {\n            // 增加列\n            selector: '#' + addColBtnId,\n            type: 'click',\n            fn: function fn() {\n              _this2._addCol(); // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\n\n              return true;\n            }\n          }, {\n            // 删除行\n            selector: '#' + delRowBtnId,\n            type: 'click',\n            fn: function fn() {\n              _this2._delRow(); // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\n\n              return true;\n            }\n          }, {\n            // 删除列\n            selector: '#' + delColBtnId,\n            type: 'click',\n            fn: function fn() {\n              _this2._delCol(); // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\n\n              return true;\n            }\n          }, {\n            // 删除表格\n            selector: '#' + delTableBtnId,\n            type: 'click',\n            fn: function fn() {\n              _this2._delTable(); // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\n\n              return true;\n            }\n          }]\n        }]\n      }); // 显示 panel\n\n      panel.show();\n    },\n    // 获取选中的单元格的位置信息\n    _getLocationData: function _getLocationData() {\n      var result = {};\n      var editor = this.editor;\n      var $selectionELem = editor.selection.getSelectionContainerElem();\n\n      if (!$selectionELem) {\n        return;\n      }\n\n      var nodeName = $selectionELem.getNodeName();\n\n      if (nodeName !== 'TD' && nodeName !== 'TH') {\n        return;\n      } // 获取 td index\n\n\n      var $tr = $selectionELem.parent();\n      var $tds = $tr.children();\n      var tdLength = $tds.length;\n      $tds.forEach(function (td, index) {\n        if (td === $selectionELem[0]) {\n          // 记录并跳出循环\n          result.td = {\n            index: index,\n            elem: td,\n            length: tdLength\n          };\n          return false;\n        }\n      }); // 获取 tr index\n\n      var $tbody = $tr.parent();\n      var $trs = $tbody.children();\n      var trLength = $trs.length;\n      $trs.forEach(function (tr, index) {\n        if (tr === $tr[0]) {\n          // 记录并跳出循环\n          result.tr = {\n            index: index,\n            elem: tr,\n            length: trLength\n          };\n          return false;\n        }\n      }); // 返回结果\n\n      return result;\n    },\n    // 增加行\n    _addRow: function _addRow() {\n      // 获取当前单元格的位置信息\n      var locationData = this._getLocationData();\n\n      if (!locationData) {\n        return;\n      }\n\n      var trData = locationData.tr;\n      var $currentTr = $(trData.elem);\n      var tdData = locationData.td;\n      var tdLength = tdData.length; // 拼接即将插入的字符串\n\n      var newTr = document.createElement('tr');\n      var tpl = '',\n          i = void 0;\n\n      for (i = 0; i < tdLength; i++) {\n        tpl += '<td>&nbsp;</td>';\n      }\n\n      newTr.innerHTML = tpl; // 插入\n\n      $(newTr).insertAfter($currentTr);\n    },\n    // 增加列\n    _addCol: function _addCol() {\n      // 获取当前单元格的位置信息\n      var locationData = this._getLocationData();\n\n      if (!locationData) {\n        return;\n      }\n\n      var trData = locationData.tr;\n      var tdData = locationData.td;\n      var tdIndex = tdData.index;\n      var $currentTr = $(trData.elem);\n      var $trParent = $currentTr.parent();\n      var $trs = $trParent.children(); // 遍历所有行\n\n      $trs.forEach(function (tr) {\n        var $tr = $(tr);\n        var $tds = $tr.children();\n        var $currentTd = $tds.get(tdIndex);\n        var name = $currentTd.getNodeName().toLowerCase(); // new 一个 td，并插入\n\n        var newTd = document.createElement(name);\n        $(newTd).insertAfter($currentTd);\n      });\n    },\n    // 删除行\n    _delRow: function _delRow() {\n      // 获取当前单元格的位置信息\n      var locationData = this._getLocationData();\n\n      if (!locationData) {\n        return;\n      }\n\n      var trData = locationData.tr;\n      var $currentTr = $(trData.elem);\n      $currentTr.remove();\n    },\n    // 删除列\n    _delCol: function _delCol() {\n      // 获取当前单元格的位置信息\n      var locationData = this._getLocationData();\n\n      if (!locationData) {\n        return;\n      }\n\n      var trData = locationData.tr;\n      var tdData = locationData.td;\n      var tdIndex = tdData.index;\n      var $currentTr = $(trData.elem);\n      var $trParent = $currentTr.parent();\n      var $trs = $trParent.children(); // 遍历所有行\n\n      $trs.forEach(function (tr) {\n        var $tr = $(tr);\n        var $tds = $tr.children();\n        var $currentTd = $tds.get(tdIndex); // 删除\n\n        $currentTd.remove();\n      });\n    },\n    // 删除表格\n    _delTable: function _delTable() {\n      var editor = this.editor;\n      var $selectionELem = editor.selection.getSelectionContainerElem();\n\n      if (!$selectionELem) {\n        return;\n      }\n\n      var $table = $selectionELem.parentUntil('table');\n\n      if (!$table) {\n        return;\n      }\n\n      $table.remove();\n    },\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n      var editor = this.editor;\n      var $elem = this.$elem;\n      var $selectionELem = editor.selection.getSelectionContainerElem();\n\n      if (!$selectionELem) {\n        return;\n      }\n\n      var nodeName = $selectionELem.getNodeName();\n\n      if (nodeName === 'TD' || nodeName === 'TH') {\n        this._active = true;\n        $elem.addClass('w-e-active');\n      } else {\n        this._active = false;\n        $elem.removeClass('w-e-active');\n      }\n    }\n  };\n  /*\n      menu - video\n  */\n  // 构造函数\n\n  function Video(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-play\"></i></div>');\n    this.type = 'panel'; // 当前是否 active 状态\n\n    this._active = false;\n  } // 原型\n\n\n  Video.prototype = {\n    constructor: Video,\n    onClick: function onClick() {\n      this._createPanel();\n    },\n    _createPanel: function _createPanel() {\n      var _this = this; // 创建 id\n\n\n      var textValId = getRandom('text-val');\n      var btnId = getRandom('btn'); // 创建 panel\n\n      var panel = new Panel(this, {\n        width: 350,\n        // 一个 panel 多个 tab\n        tabs: [{\n          // 标题\n          title: '插入视频',\n          // 模板\n          tpl: '<div>\\n                        <input id=\"' + textValId + \"\\\" type=\\\"text\\\" class=\\\"block\\\" placeholder=\\\"\\u683C\\u5F0F\\u5982\\uFF1A<iframe src=... ></iframe>\\\"/>\\n                        <div class=\\\"w-e-button-container\\\">\\n                            <button id=\\\"\" + btnId + \"\\\" class=\\\"right\\\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>\",\n          // 事件绑定\n          events: [{\n            selector: '#' + btnId,\n            type: 'click',\n            fn: function fn() {\n              var $text = $('#' + textValId);\n              var val = $text.val().trim(); // 测试用视频地址\n              // <iframe height=498 width=510 src='http://player.youku.com/embed/XMjcwMzc3MzM3Mg==' frameborder=0 'allowfullscreen'></iframe>\n\n              if (val) {\n                // 插入视频\n                _this._insert(val);\n              } // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\n\n              return true;\n            }\n          }] // first tab end\n\n        }] // tabs end\n\n      }); // panel end\n      // 显示 panel\n\n      panel.show(); // 记录属性\n\n      this.panel = panel;\n    },\n    // 插入视频\n    _insert: function _insert(val) {\n      var editor = this.editor;\n      editor.cmd.do('insertHTML', val + '<p><br></p>');\n    }\n  };\n  /*\n      menu - img\n  */\n  // 构造函数\n\n  function Image(editor) {\n    this.editor = editor;\n    var imgMenuId = getRandom('w-e-img');\n    this.$elem = $('<div class=\"w-e-menu\" id=\"' + imgMenuId + '\"><i class=\"w-e-icon-image\"></i></div>');\n    editor.imgMenuId = imgMenuId;\n    this.type = 'panel'; // 当前是否 active 状态\n\n    this._active = false;\n  } // 原型\n\n\n  Image.prototype = {\n    constructor: Image,\n    onClick: function onClick() {\n      var editor = this.editor;\n      var config = editor.config;\n\n      if (config.qiniu) {\n        return;\n      }\n\n      if (this._active) {\n        this._createEditPanel();\n      } else {\n        this._createInsertPanel();\n      }\n    },\n    _createEditPanel: function _createEditPanel() {\n      var editor = this.editor; // id\n\n      var width30 = getRandom('width-30');\n      var width50 = getRandom('width-50');\n      var width100 = getRandom('width-100');\n      var delBtn = getRandom('del-btn'); // tab 配置\n\n      var tabsConfig = [{\n        title: '编辑图片',\n        tpl: \"<div>\\n                    <div class=\\\"w-e-button-container\\\" style=\\\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\\\">\\n                        <span style=\\\"float:left;font-size:14px;margin:4px 5px 0 5px;color:#333;\\\">\\u6700\\u5927\\u5BBD\\u5EA6\\uFF1A</span>\\n                        <button id=\\\"\" + width30 + '\" class=\"left\">30%</button>\\n                        <button id=\"' + width50 + '\" class=\"left\">50%</button>\\n                        <button id=\"' + width100 + '\" class=\"left\">100%</button>\\n                    </div>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + delBtn + \"\\\" class=\\\"gray left\\\">\\u5220\\u9664\\u56FE\\u7247</button>\\n                    </dv>\\n                </div>\",\n        events: [{\n          selector: '#' + width30,\n          type: 'click',\n          fn: function fn() {\n            var $img = editor._selectedImg;\n\n            if ($img) {\n              $img.css('max-width', '30%');\n            } // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\n\n            return true;\n          }\n        }, {\n          selector: '#' + width50,\n          type: 'click',\n          fn: function fn() {\n            var $img = editor._selectedImg;\n\n            if ($img) {\n              $img.css('max-width', '50%');\n            } // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\n\n            return true;\n          }\n        }, {\n          selector: '#' + width100,\n          type: 'click',\n          fn: function fn() {\n            var $img = editor._selectedImg;\n\n            if ($img) {\n              $img.css('max-width', '100%');\n            } // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\n\n            return true;\n          }\n        }, {\n          selector: '#' + delBtn,\n          type: 'click',\n          fn: function fn() {\n            var $img = editor._selectedImg;\n\n            if ($img) {\n              $img.remove();\n            } // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n\n\n            return true;\n          }\n        }]\n      }]; // 创建 panel 并显示\n\n      var panel = new Panel(this, {\n        width: 300,\n        tabs: tabsConfig\n      });\n      panel.show(); // 记录属性\n\n      this.panel = panel;\n    },\n    _createInsertPanel: function _createInsertPanel() {\n      var editor = this.editor;\n      var uploadImg = editor.uploadImg;\n      var config = editor.config; // id\n\n      var upTriggerId = getRandom('up-trigger');\n      var upFileId = getRandom('up-file');\n      var linkUrlId = getRandom('link-url');\n      var linkBtnId = getRandom('link-btn'); // tabs 的配置\n\n      var tabsConfig = [{\n        title: '上传图片',\n        tpl: '<div class=\"w-e-up-img-container\">\\n                    <div id=\"' + upTriggerId + '\" class=\"w-e-up-btn\">\\n                        <i class=\"w-e-icon-upload2\"></i>\\n                    </div>\\n                    <div style=\"display:none;\">\\n                        <input id=\"' + upFileId + '\" type=\"file\" multiple=\"multiple\" accept=\"image/jpg,image/jpeg,image/png,image/gif,image/bmp\"/>\\n                    </div>\\n                </div>',\n        events: [{\n          // 触发选择图片\n          selector: '#' + upTriggerId,\n          type: 'click',\n          fn: function fn() {\n            var $file = $('#' + upFileId);\n            var fileElem = $file[0];\n\n            if (fileElem) {\n              fileElem.click();\n            } else {\n              // 返回 true 可关闭 panel\n              return true;\n            }\n          }\n        }, {\n          // 选择图片完毕\n          selector: '#' + upFileId,\n          type: 'change',\n          fn: function fn() {\n            var $file = $('#' + upFileId);\n            var fileElem = $file[0];\n\n            if (!fileElem) {\n              // 返回 true 可关闭 panel\n              return true;\n            } // 获取选中的 file 对象列表\n\n\n            var fileList = fileElem.files;\n\n            if (fileList.length) {\n              uploadImg.uploadImg(fileList);\n            } // 返回 true 可关闭 panel\n\n\n            return true;\n          }\n        }]\n      }, // first tab end\n      {\n        title: '网络图片',\n        tpl: '<div>\\n                    <input id=\"' + linkUrlId + \"\\\" type=\\\"text\\\" class=\\\"block\\\" placeholder=\\\"\\u56FE\\u7247\\u94FE\\u63A5\\\"/></td>\\n                    <div class=\\\"w-e-button-container\\\">\\n                        <button id=\\\"\" + linkBtnId + \"\\\" class=\\\"right\\\">\\u63D2\\u5165</button>\\n                    </div>\\n                </div>\",\n        events: [{\n          selector: '#' + linkBtnId,\n          type: 'click',\n          fn: function fn() {\n            var $linkUrl = $('#' + linkUrlId);\n            var url = $linkUrl.val().trim();\n\n            if (url) {\n              uploadImg.insertLinkImg(url);\n            } // 返回 true 表示函数执行结束之后关闭 panel\n\n\n            return true;\n          }\n        }] // second tab end\n\n      }]; // tabs end\n      // 判断 tabs 的显示\n\n      var tabsConfigResult = [];\n\n      if ((config.uploadImgShowBase64 || config.uploadImgServer || config.customUploadImg) && window.FileReader) {\n        // 显示“上传图片”\n        tabsConfigResult.push(tabsConfig[0]);\n      }\n\n      if (config.showLinkImg) {\n        // 显示“网络图片”\n        tabsConfigResult.push(tabsConfig[1]);\n      } // 创建 panel 并显示\n\n\n      var panel = new Panel(this, {\n        width: 300,\n        tabs: tabsConfigResult\n      });\n      panel.show(); // 记录属性\n\n      this.panel = panel;\n    },\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n      var editor = this.editor;\n      var $elem = this.$elem;\n\n      if (editor._selectedImg) {\n        this._active = true;\n        $elem.addClass('w-e-active');\n      } else {\n        this._active = false;\n        $elem.removeClass('w-e-active');\n      }\n    }\n  };\n  /*\n      所有菜单的汇总\n  */\n  // 存储菜单的构造函数\n\n  var MenuConstructors = {};\n  MenuConstructors.bold = Bold;\n  MenuConstructors.head = Head;\n  MenuConstructors.fontSize = FontSize;\n  MenuConstructors.fontName = FontName;\n  MenuConstructors.link = Link;\n  MenuConstructors.italic = Italic;\n  MenuConstructors.redo = Redo;\n  MenuConstructors.strikeThrough = StrikeThrough;\n  MenuConstructors.underline = Underline;\n  MenuConstructors.undo = Undo;\n  MenuConstructors.list = List;\n  MenuConstructors.justify = Justify;\n  MenuConstructors.foreColor = ForeColor;\n  MenuConstructors.backColor = BackColor;\n  MenuConstructors.quote = Quote;\n  MenuConstructors.code = Code;\n  MenuConstructors.emoticon = Emoticon;\n  MenuConstructors.table = Table;\n  MenuConstructors.video = Video;\n  MenuConstructors.image = Image;\n  /*\n      菜单集合\n  */\n  // 构造函数\n\n  function Menus(editor) {\n    this.editor = editor;\n    this.menus = {};\n  } // 修改原型\n\n\n  Menus.prototype = {\n    constructor: Menus,\n    // 初始化菜单\n    init: function init() {\n      var _this = this;\n\n      var editor = this.editor;\n      var config = editor.config || {};\n      var configMenus = config.menus || []; // 获取配置中的菜单\n      // 根据配置信息，创建菜单\n\n      configMenus.forEach(function (menuKey) {\n        var MenuConstructor = MenuConstructors[menuKey];\n\n        if (MenuConstructor && typeof MenuConstructor === 'function') {\n          // 创建单个菜单\n          _this.menus[menuKey] = new MenuConstructor(editor);\n        }\n      }); // 添加到菜单栏\n\n      this._addToToolbar(); // 绑定事件\n\n\n      this._bindEvent();\n    },\n    // 添加到菜单栏\n    _addToToolbar: function _addToToolbar() {\n      var editor = this.editor;\n      var $toolbarElem = editor.$toolbarElem;\n      var menus = this.menus;\n      var config = editor.config; // config.zIndex 是配置的编辑区域的 z-index，菜单的 z-index 得在其基础上 +1\n\n      var zIndex = config.zIndex + 1;\n      objForEach(menus, function (key, menu) {\n        var $elem = menu.$elem;\n\n        if ($elem) {\n          // 设置 z-index\n          $elem.css('z-index', zIndex);\n          $toolbarElem.append($elem);\n        }\n      });\n    },\n    // 绑定菜单 click mouseenter 事件\n    _bindEvent: function _bindEvent() {\n      var menus = this.menus;\n      var editor = this.editor;\n      objForEach(menus, function (key, menu) {\n        var type = menu.type;\n\n        if (!type) {\n          return;\n        }\n\n        var $elem = menu.$elem;\n        var droplist = menu.droplist;\n        var panel = menu.panel; // 点击类型，例如 bold\n\n        if (type === 'click' && menu.onClick) {\n          $elem.on('click', function (e) {\n            if (editor.selection.getRange() == null) {\n              return;\n            }\n\n            menu.onClick(e);\n          });\n        } // 下拉框，例如 head\n\n\n        if (type === 'droplist' && droplist) {\n          $elem.on('mouseenter', function (e) {\n            if (editor.selection.getRange() == null) {\n              return;\n            } // 显示\n\n\n            droplist.showTimeoutId = setTimeout(function () {\n              droplist.show();\n            }, 200);\n          }).on('mouseleave', function (e) {\n            // 隐藏\n            droplist.hideTimeoutId = setTimeout(function () {\n              droplist.hide();\n            }, 0);\n          });\n        } // 弹框类型，例如 link\n\n\n        if (type === 'panel' && menu.onClick) {\n          $elem.on('click', function (e) {\n            e.stopPropagation();\n\n            if (editor.selection.getRange() == null) {\n              return;\n            } // 在自定义事件中显示 panel\n\n\n            menu.onClick(e);\n          });\n        }\n      });\n    },\n    // 尝试修改菜单状态\n    changeActive: function changeActive() {\n      var menus = this.menus;\n      objForEach(menus, function (key, menu) {\n        if (menu.tryChangeActive) {\n          setTimeout(function () {\n            menu.tryChangeActive();\n          }, 100);\n        }\n      });\n    }\n  };\n  /*\n      粘贴信息的处理\n  */\n  // 获取粘贴的纯文本\n\n  function getPasteText(e) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0;\n\n    if (clipboardData == null) {\n      pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n      pasteText = clipboardData.getData('text/plain');\n    }\n\n    return replaceHtmlSymbol(pasteText);\n  } // 获取粘贴的html\n\n\n  function getPasteHtml(e, filterStyle, ignoreImg) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0,\n        pasteHtml = void 0;\n\n    if (clipboardData == null) {\n      pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n      pasteText = clipboardData.getData('text/plain');\n      pasteHtml = clipboardData.getData('text/html');\n    }\n\n    if (!pasteHtml && pasteText) {\n      pasteHtml = '<p>' + replaceHtmlSymbol(pasteText) + '</p>';\n    }\n\n    if (!pasteHtml) {\n      return;\n    } // 过滤word中状态过来的无用字符\n\n\n    var docSplitHtml = pasteHtml.split('</html>');\n\n    if (docSplitHtml.length === 2) {\n      pasteHtml = docSplitHtml[0];\n    } // 过滤无用标签\n\n\n    pasteHtml = pasteHtml.replace(/<(meta|script|link).+?>/igm, ''); // 去掉注释\n\n    pasteHtml = pasteHtml.replace(/<!--.*?-->/mg, ''); // 过滤 data-xxx 属性\n\n    pasteHtml = pasteHtml.replace(/\\s?data-.+?=('|\").+?('|\")/igm, '');\n\n    if (ignoreImg) {\n      // 忽略图片\n      pasteHtml = pasteHtml.replace(/<img.+?>/igm, '');\n    }\n\n    if (filterStyle) {\n      // 过滤样式\n      pasteHtml = pasteHtml.replace(/\\s?(class|style)=('|\").*?('|\")/igm, '');\n    } else {\n      // 保留样式\n      pasteHtml = pasteHtml.replace(/\\s?class=('|\").*?('|\")/igm, '');\n    }\n\n    return pasteHtml;\n  } // 获取粘贴的图片文件\n\n\n  function getPasteImgs(e) {\n    var result = [];\n    var txt = getPasteText(e);\n\n    if (txt) {\n      // 有文字，就忽略图片\n      return result;\n    }\n\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData || {};\n    var items = clipboardData.items;\n\n    if (!items) {\n      return result;\n    }\n\n    objForEach(items, function (key, value) {\n      var type = value.type;\n\n      if (/image/i.test(type)) {\n        result.push(value.getAsFile());\n      }\n    });\n    return result;\n  }\n  /*\n      编辑区域\n  */\n  // 获取一个 elem.childNodes 的 JSON 数据\n\n\n  function getChildrenJSON($elem) {\n    var result = [];\n    var $children = $elem.childNodes() || []; // 注意 childNodes() 可以获取文本节点\n\n    $children.forEach(function (curElem) {\n      var elemResult = void 0;\n      var nodeType = curElem.nodeType; // 文本节点\n\n      if (nodeType === 3) {\n        elemResult = curElem.textContent;\n        elemResult = replaceHtmlSymbol(elemResult);\n      } // 普通 DOM 节点\n\n\n      if (nodeType === 1) {\n        elemResult = {}; // tag\n\n        elemResult.tag = curElem.nodeName.toLowerCase(); // attr\n\n        var attrData = [];\n        var attrList = curElem.attributes || {};\n        var attrListLength = attrList.length || 0;\n\n        for (var i = 0; i < attrListLength; i++) {\n          var attr = attrList[i];\n          attrData.push({\n            name: attr.name,\n            value: attr.value\n          });\n        }\n\n        elemResult.attrs = attrData; // children（递归）\n\n        elemResult.children = getChildrenJSON($(curElem));\n      }\n\n      result.push(elemResult);\n    });\n    return result;\n  } // 构造函数\n\n\n  function Text(editor) {\n    this.editor = editor;\n  } // 修改原型\n\n\n  Text.prototype = {\n    constructor: Text,\n    // 初始化\n    init: function init() {\n      // 绑定事件\n      this._bindEvent();\n    },\n    // 清空内容\n    clear: function clear() {\n      this.html('<p><br></p>');\n    },\n    // 获取 设置 html\n    html: function html(val) {\n      var editor = this.editor;\n      var $textElem = editor.$textElem;\n      var html = void 0;\n\n      if (val == null) {\n        html = $textElem.html(); // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n\n        html = html.replace(/\\u200b/gm, '');\n        return html;\n      } else {\n        $textElem.html(val); // 初始化选取，将光标定位到内容尾部\n\n        editor.initSelection();\n      }\n    },\n    // 获取 JSON\n    getJSON: function getJSON() {\n      var editor = this.editor;\n      var $textElem = editor.$textElem;\n      return getChildrenJSON($textElem);\n    },\n    // 获取 设置 text\n    text: function text(val) {\n      var editor = this.editor;\n      var $textElem = editor.$textElem;\n      var text = void 0;\n\n      if (val == null) {\n        text = $textElem.text(); // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n\n        text = text.replace(/\\u200b/gm, '');\n        return text;\n      } else {\n        $textElem.text('<p>' + val + '</p>'); // 初始化选取，将光标定位到内容尾部\n\n        editor.initSelection();\n      }\n    },\n    // 追加内容\n    append: function append(html) {\n      var editor = this.editor;\n      var $textElem = editor.$textElem;\n      $textElem.append($(html)); // 初始化选取，将光标定位到内容尾部\n\n      editor.initSelection();\n    },\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n      // 实时保存选取\n      this._saveRangeRealTime(); // 按回车建时的特殊处理\n\n\n      this._enterKeyHandle(); // 清空时保留 <p><br></p>\n\n\n      this._clearHandle(); // 粘贴事件（粘贴文字，粘贴图片）\n\n\n      this._pasteHandle(); // tab 特殊处理\n\n\n      this._tabHandle(); // img 点击\n\n\n      this._imgHandle(); // 拖拽事件\n\n\n      this._dragHandle();\n    },\n    // 实时保存选取\n    _saveRangeRealTime: function _saveRangeRealTime() {\n      var editor = this.editor;\n      var $textElem = editor.$textElem; // 保存当前的选区\n\n      function saveRange(e) {\n        // 随时保存选区\n        editor.selection.saveRange(); // 更新按钮 ative 状态\n\n        editor.menus.changeActive();\n      } // 按键后保存\n\n\n      $textElem.on('keyup', saveRange);\n      $textElem.on('mousedown', function (e) {\n        // mousedown 状态下，鼠标滑动到编辑区域外面，也需要保存选区\n        $textElem.on('mouseleave', saveRange);\n      });\n      $textElem.on('mouseup', function (e) {\n        saveRange(); // 在编辑器区域之内完成点击，取消鼠标滑动到编辑区外面的事件\n\n        $textElem.off('mouseleave', saveRange);\n      });\n    },\n    // 按回车键时的特殊处理\n    _enterKeyHandle: function _enterKeyHandle() {\n      var editor = this.editor;\n      var $textElem = editor.$textElem;\n\n      function insertEmptyP($selectionElem) {\n        var $p = $('<p><br></p>');\n        $p.insertBefore($selectionElem);\n        editor.selection.createRangeByElem($p, true);\n        editor.selection.restoreSelection();\n        $selectionElem.remove();\n      } // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n\n\n      function pHandle(e) {\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        var $parentElem = $selectionElem.parent();\n\n        if ($parentElem.html() === '<code><br></code>') {\n          // 回车之前光标所在一个 <p><code>.....</code></p> ，忽然回车生成一个空的 <p><code><br></code></p>\n          // 而且继续回车跳不出去，因此只能特殊处理\n          insertEmptyP($selectionElem);\n          return;\n        }\n\n        if (!$parentElem.equal($textElem)) {\n          // 不是顶级标签\n          return;\n        }\n\n        var nodeName = $selectionElem.getNodeName();\n\n        if (nodeName === 'P') {\n          // 当前的标签是 P ，不用做处理\n          return;\n        }\n\n        if ($selectionElem.text()) {\n          // 有内容，不做处理\n          return;\n        } // 插入 <p> ，并将选取定位到 <p>，删除当前标签\n\n\n        insertEmptyP($selectionElem);\n      }\n\n      $textElem.on('keyup', function (e) {\n        if (e.keyCode !== 13) {\n          // 不是回车键\n          return;\n        } // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n\n\n        pHandle(e);\n      }); // <pre><code></code></pre> 回车时 特殊处理\n\n      function codeHandle(e) {\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n\n        if (!$selectionElem) {\n          return;\n        }\n\n        var $parentElem = $selectionElem.parent();\n        var selectionNodeName = $selectionElem.getNodeName();\n        var parentNodeName = $parentElem.getNodeName();\n\n        if (selectionNodeName !== 'CODE' || parentNodeName !== 'PRE') {\n          // 不符合要求 忽略\n          return;\n        }\n\n        if (!editor.cmd.queryCommandSupported('insertHTML')) {\n          // 必须原生支持 insertHTML 命令\n          return;\n        } // 处理：光标定位到代码末尾，联系点击两次回车，即跳出代码块\n\n\n        if (editor._willBreakCode === true) {\n          // 此时可以跳出代码块\n          // 插入 <p> ，并将选取定位到 <p>\n          var $p = $('<p><br></p>');\n          $p.insertAfter($parentElem);\n          editor.selection.createRangeByElem($p, true);\n          editor.selection.restoreSelection(); // 修改状态\n\n          editor._willBreakCode = false;\n          e.preventDefault();\n          return;\n        }\n\n        var _startOffset = editor.selection.getRange().startOffset; // 处理：回车时，不能插入 <br> 而是插入 \\n ，因为是在 pre 标签里面\n\n        editor.cmd.do('insertHTML', '\\n');\n        editor.selection.saveRange();\n\n        if (editor.selection.getRange().startOffset === _startOffset) {\n          // 没起作用，再来一遍\n          editor.cmd.do('insertHTML', '\\n');\n        }\n\n        var codeLength = $selectionElem.html().length;\n\n        if (editor.selection.getRange().startOffset + 1 === codeLength) {\n          // 说明光标在代码最后的位置，执行了回车操作\n          // 记录下来，以便下次回车时候跳出 code\n          editor._willBreakCode = true;\n        } // 阻止默认行为\n\n\n        e.preventDefault();\n      }\n\n      $textElem.on('keydown', function (e) {\n        if (e.keyCode !== 13) {\n          // 不是回车键\n          // 取消即将跳转代码块的记录\n          editor._willBreakCode = false;\n          return;\n        } // <pre><code></code></pre> 回车时 特殊处理\n\n\n        codeHandle(e);\n      });\n    },\n    // 清空时保留 <p><br></p>\n    _clearHandle: function _clearHandle() {\n      var editor = this.editor;\n      var $textElem = editor.$textElem;\n      $textElem.on('keydown', function (e) {\n        if (e.keyCode !== 8) {\n          return;\n        }\n\n        var txtHtml = $textElem.html().toLowerCase().trim();\n\n        if (txtHtml === '<p><br></p>') {\n          // 最后剩下一个空行，就不再删除了\n          e.preventDefault();\n          return;\n        }\n      });\n      $textElem.on('keyup', function (e) {\n        if (e.keyCode !== 8) {\n          return;\n        }\n\n        var $p = void 0;\n        var txtHtml = $textElem.html().toLowerCase().trim(); // firefox 时用 txtHtml === '<br>' 判断，其他用 !txtHtml 判断\n\n        if (!txtHtml || txtHtml === '<br>') {\n          // 内容空了\n          $p = $('<p><br/></p>');\n          $textElem.html(''); // 一定要先清空，否则在 firefox 下有问题\n\n          $textElem.append($p);\n          editor.selection.createRangeByElem($p, false, true);\n          editor.selection.restoreSelection();\n        }\n      });\n    },\n    // 粘贴事件（粘贴文字 粘贴图片）\n    _pasteHandle: function _pasteHandle() {\n      var editor = this.editor;\n      var config = editor.config;\n      var pasteFilterStyle = config.pasteFilterStyle;\n      var pasteTextHandle = config.pasteTextHandle;\n      var ignoreImg = config.pasteIgnoreImg;\n      var $textElem = editor.$textElem; // 粘贴图片、文本的事件，每次只能执行一个\n      // 判断该次粘贴事件是否可以执行\n\n      var pasteTime = 0;\n\n      function canDo() {\n        var now = Date.now();\n        var flag = false;\n\n        if (now - pasteTime >= 100) {\n          // 间隔大于 100 ms ，可以执行\n          flag = true;\n        }\n\n        pasteTime = now;\n        return flag;\n      }\n\n      function resetTime() {\n        pasteTime = 0;\n      } // 粘贴文字\n\n\n      $textElem.on('paste', function (e) {\n        if (UA.isIE()) {\n          return;\n        } else {\n          // 阻止默认行为，使用 execCommand 的粘贴命令\n          e.preventDefault();\n        } // 粘贴图片和文本，只能同时使用一个\n\n\n        if (!canDo()) {\n          return;\n        } // 获取粘贴的文字\n\n\n        var pasteHtml = getPasteHtml(e, pasteFilterStyle, ignoreImg);\n        var pasteText = getPasteText(e);\n        pasteText = pasteText.replace(/\\n/gm, '<br>');\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n\n        if (!$selectionElem) {\n          return;\n        }\n\n        var nodeName = $selectionElem.getNodeName(); // code 中只能粘贴纯文本\n\n        if (nodeName === 'CODE' || nodeName === 'PRE') {\n          if (pasteTextHandle && isFunction(pasteTextHandle)) {\n            // 用户自定义过滤处理粘贴内容\n            pasteText = '' + (pasteTextHandle(pasteText) || '');\n          }\n\n          editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n          return;\n        } // 先放开注释，有问题再追查 ————\n        // // 表格中忽略，可能会出现异常问题\n        // if (nodeName === 'TD' || nodeName === 'TH') {\n        //     return\n        // }\n\n\n        if (!pasteHtml) {\n          // 没有内容，可继续执行下面的图片粘贴\n          resetTime();\n          return;\n        }\n\n        try {\n          // firefox 中，获取的 pasteHtml 可能是没有 <ul> 包裹的 <li>\n          // 因此执行 insertHTML 会报错\n          if (pasteTextHandle && isFunction(pasteTextHandle)) {\n            // 用户自定义过滤处理粘贴内容\n            pasteHtml = '' + (pasteTextHandle(pasteHtml) || '');\n          }\n\n          editor.cmd.do('insertHTML', pasteHtml);\n        } catch (ex) {\n          // 此时使用 pasteText 来兼容一下\n          if (pasteTextHandle && isFunction(pasteTextHandle)) {\n            // 用户自定义过滤处理粘贴内容\n            pasteText = '' + (pasteTextHandle(pasteText) || '');\n          }\n\n          editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n        }\n      }); // 粘贴图片\n\n      $textElem.on('paste', function (e) {\n        if (UA.isIE()) {\n          return;\n        } else {\n          e.preventDefault();\n        } // 粘贴图片和文本，只能同时使用一个\n\n\n        if (!canDo()) {\n          return;\n        } // 获取粘贴的图片\n\n\n        var pasteFiles = getPasteImgs(e);\n\n        if (!pasteFiles || !pasteFiles.length) {\n          return;\n        } // 获取当前的元素\n\n\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n\n        if (!$selectionElem) {\n          return;\n        }\n\n        var nodeName = $selectionElem.getNodeName(); // code 中粘贴忽略\n\n        if (nodeName === 'CODE' || nodeName === 'PRE') {\n          return;\n        } // 上传图片\n\n\n        var uploadImg = editor.uploadImg;\n        uploadImg.uploadImg(pasteFiles);\n      });\n    },\n    // tab 特殊处理\n    _tabHandle: function _tabHandle() {\n      var editor = this.editor;\n      var $textElem = editor.$textElem;\n      $textElem.on('keydown', function (e) {\n        if (e.keyCode !== 9) {\n          return;\n        }\n\n        if (!editor.cmd.queryCommandSupported('insertHTML')) {\n          // 必须原生支持 insertHTML 命令\n          return;\n        }\n\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n\n        if (!$selectionElem) {\n          return;\n        }\n\n        var $parentElem = $selectionElem.parent();\n        var selectionNodeName = $selectionElem.getNodeName();\n        var parentNodeName = $parentElem.getNodeName();\n\n        if (selectionNodeName === 'CODE' && parentNodeName === 'PRE') {\n          // <pre><code> 里面\n          editor.cmd.do('insertHTML', '    ');\n        } else {\n          // 普通文字\n          editor.cmd.do('insertHTML', '&nbsp;&nbsp;&nbsp;&nbsp;');\n        }\n\n        e.preventDefault();\n      });\n    },\n    // img 点击\n    _imgHandle: function _imgHandle() {\n      var editor = this.editor;\n      var $textElem = editor.$textElem; // 为图片增加 selected 样式\n\n      $textElem.on('click', 'img', function (e) {\n        var img = this;\n        var $img = $(img);\n\n        if ($img.attr('data-w-e') === '1') {\n          // 是表情图片，忽略\n          return;\n        } // 记录当前点击过的图片\n\n\n        editor._selectedImg = $img; // 修改选区并 restore ，防止用户此时点击退格键，会删除其他内容\n\n        editor.selection.createRangeByElem($img);\n        editor.selection.restoreSelection();\n      }); // 去掉图片的 selected 样式\n\n      $textElem.on('click  keyup', function (e) {\n        if (e.target.matches('img')) {\n          // 点击的是图片，忽略\n          return;\n        } // 删除记录\n\n\n        editor._selectedImg = null;\n      });\n    },\n    // 拖拽事件\n    _dragHandle: function _dragHandle() {\n      var editor = this.editor; // 禁用 document 拖拽事件\n\n      var $document = $(document);\n      $document.on('dragleave drop dragenter dragover', function (e) {\n        e.preventDefault();\n      }); // 添加编辑区域拖拽事件\n\n      var $textElem = editor.$textElem;\n      $textElem.on('drop', function (e) {\n        e.preventDefault();\n        var files = e.dataTransfer && e.dataTransfer.files;\n\n        if (!files || !files.length) {\n          return;\n        } // 上传图片\n\n\n        var uploadImg = editor.uploadImg;\n        uploadImg.uploadImg(files);\n      });\n    }\n  };\n  /*\n      命令，封装 document.execCommand\n  */\n  // 构造函数\n\n  function Command(editor) {\n    this.editor = editor;\n  } // 修改原型\n\n\n  Command.prototype = {\n    constructor: Command,\n    // 执行命令\n    do: function _do(name, value) {\n      var editor = this.editor; // 使用 styleWithCSS\n\n      if (!editor._useStyleWithCSS) {\n        document.execCommand('styleWithCSS', null, true);\n        editor._useStyleWithCSS = true;\n      } // 如果无选区，忽略\n\n\n      if (!editor.selection.getRange()) {\n        return;\n      } // 恢复选取\n\n\n      editor.selection.restoreSelection(); // 执行\n\n      var _name = '_' + name;\n\n      if (this[_name]) {\n        // 有自定义事件\n        this[_name](value);\n      } else {\n        // 默认 command\n        this._execCommand(name, value);\n      } // 修改菜单状态\n\n\n      editor.menus.changeActive(); // 最后，恢复选取保证光标在原来的位置闪烁\n\n      editor.selection.saveRange();\n      editor.selection.restoreSelection(); // 触发 onchange\n\n      editor.change && editor.change();\n    },\n    // 自定义 insertHTML 事件\n    _insertHTML: function _insertHTML(html) {\n      var editor = this.editor;\n      var range = editor.selection.getRange();\n\n      if (this.queryCommandSupported('insertHTML')) {\n        // W3C\n        this._execCommand('insertHTML', html);\n      } else if (range.insertNode) {\n        // IE\n        range.deleteContents();\n        range.insertNode($(html)[0]);\n      } else if (range.pasteHTML) {\n        // IE <= 10\n        range.pasteHTML(html);\n      }\n    },\n    // 插入 elem\n    _insertElem: function _insertElem($elem) {\n      var editor = this.editor;\n      var range = editor.selection.getRange();\n\n      if (range.insertNode) {\n        range.deleteContents();\n        range.insertNode($elem[0]);\n      }\n    },\n    // 封装 execCommand\n    _execCommand: function _execCommand(name, value) {\n      document.execCommand(name, false, value);\n    },\n    // 封装 document.queryCommandValue\n    queryCommandValue: function queryCommandValue(name) {\n      return document.queryCommandValue(name);\n    },\n    // 封装 document.queryCommandState\n    queryCommandState: function queryCommandState(name) {\n      return document.queryCommandState(name);\n    },\n    // 封装 document.queryCommandSupported\n    queryCommandSupported: function queryCommandSupported(name) {\n      return document.queryCommandSupported(name);\n    }\n  };\n  /*\n      selection range API\n  */\n  // 构造函数\n\n  function API(editor) {\n    this.editor = editor;\n    this._currentRange = null;\n  } // 修改原型\n\n\n  API.prototype = {\n    constructor: API,\n    // 获取 range 对象\n    getRange: function getRange() {\n      return this._currentRange;\n    },\n    // 保存选区\n    saveRange: function saveRange(_range) {\n      if (_range) {\n        // 保存已有选区\n        this._currentRange = _range;\n        return;\n      } // 获取当前的选区\n\n\n      var selection = window.getSelection();\n\n      if (selection.rangeCount === 0) {\n        return;\n      }\n\n      var range = selection.getRangeAt(0); // 判断选区内容是否在编辑内容之内\n\n      var $containerElem = this.getSelectionContainerElem(range);\n\n      if (!$containerElem) {\n        return;\n      } // 判断选区内容是否在不可编辑区域之内\n\n\n      if ($containerElem.attr('contenteditable') === 'false' || $containerElem.parentUntil('[contenteditable=false]')) {\n        return;\n      }\n\n      var editor = this.editor;\n      var $textElem = editor.$textElem;\n\n      if ($textElem.isContain($containerElem)) {\n        // 是编辑内容之内的\n        this._currentRange = range;\n      }\n    },\n    // 折叠选区\n    collapseRange: function collapseRange(toStart) {\n      if (toStart == null) {\n        // 默认为 false\n        toStart = false;\n      }\n\n      var range = this._currentRange;\n\n      if (range) {\n        range.collapse(toStart);\n      }\n    },\n    // 选中区域的文字\n    getSelectionText: function getSelectionText() {\n      var range = this._currentRange;\n\n      if (range) {\n        return this._currentRange.toString();\n      } else {\n        return '';\n      }\n    },\n    // 选区的 $Elem\n    getSelectionContainerElem: function getSelectionContainerElem(range) {\n      range = range || this._currentRange;\n      var elem = void 0;\n\n      if (range) {\n        elem = range.commonAncestorContainer;\n        return $(elem.nodeType === 1 ? elem : elem.parentNode);\n      }\n    },\n    getSelectionStartElem: function getSelectionStartElem(range) {\n      range = range || this._currentRange;\n      var elem = void 0;\n\n      if (range) {\n        elem = range.startContainer;\n        return $(elem.nodeType === 1 ? elem : elem.parentNode);\n      }\n    },\n    getSelectionEndElem: function getSelectionEndElem(range) {\n      range = range || this._currentRange;\n      var elem = void 0;\n\n      if (range) {\n        elem = range.endContainer;\n        return $(elem.nodeType === 1 ? elem : elem.parentNode);\n      }\n    },\n    // 选区是否为空\n    isSelectionEmpty: function isSelectionEmpty() {\n      var range = this._currentRange;\n\n      if (range && range.startContainer) {\n        if (range.startContainer === range.endContainer) {\n          if (range.startOffset === range.endOffset) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n    // 恢复选区\n    restoreSelection: function restoreSelection() {\n      var selection = window.getSelection();\n      selection.removeAllRanges();\n      selection.addRange(this._currentRange);\n    },\n    // 创建一个空白（即 &#8203 字符）选区\n    createEmptyRange: function createEmptyRange() {\n      var editor = this.editor;\n      var range = this.getRange();\n      var $elem = void 0;\n\n      if (!range) {\n        // 当前无 range\n        return;\n      }\n\n      if (!this.isSelectionEmpty()) {\n        // 当前选区必须没有内容才可以\n        return;\n      }\n\n      try {\n        // 目前只支持 webkit 内核\n        if (UA.isWebkit()) {\n          // 插入 &#8203\n          editor.cmd.do('insertHTML', '&#8203;'); // 修改 offset 位置\n\n          range.setEnd(range.endContainer, range.endOffset + 1); // 存储\n\n          this.saveRange(range);\n        } else {\n          $elem = $('<strong>&#8203;</strong>');\n          editor.cmd.do('insertElem', $elem);\n          this.createRangeByElem($elem, true);\n        }\n      } catch (ex) {// 部分情况下会报错，兼容一下\n      }\n    },\n    // 根据 $Elem 设置选区\n    createRangeByElem: function createRangeByElem($elem, toStart, isContent) {\n      // $elem - 经过封装的 elem\n      // toStart - true 开始位置，false 结束位置\n      // isContent - 是否选中Elem的内容\n      if (!$elem.length) {\n        return;\n      }\n\n      var elem = $elem[0];\n      var range = document.createRange();\n\n      if (isContent) {\n        range.selectNodeContents(elem);\n      } else {\n        range.selectNode(elem);\n      }\n\n      if (typeof toStart === 'boolean') {\n        range.collapse(toStart);\n      } // 存储 range\n\n\n      this.saveRange(range);\n    }\n  };\n  /*\n      上传进度条\n  */\n\n  function Progress(editor) {\n    this.editor = editor;\n    this._time = 0;\n    this._isShow = false;\n    this._isRender = false;\n    this._timeoutId = 0;\n    this.$textContainer = editor.$textContainerElem;\n    this.$bar = $('<div class=\"w-e-progress\"></div>');\n  }\n\n  Progress.prototype = {\n    constructor: Progress,\n    show: function show(progress) {\n      var _this = this; // 状态处理\n\n\n      if (this._isShow) {\n        return;\n      }\n\n      this._isShow = true; // 渲染\n\n      var $bar = this.$bar;\n\n      if (!this._isRender) {\n        var $textContainer = this.$textContainer;\n        $textContainer.append($bar);\n      } else {\n        this._isRender = true;\n      } // 改变进度（节流，100ms 渲染一次）\n\n\n      if (Date.now() - this._time > 100) {\n        if (progress <= 1) {\n          $bar.css('width', progress * 100 + '%');\n          this._time = Date.now();\n        }\n      } // 隐藏\n\n\n      var timeoutId = this._timeoutId;\n\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n\n      timeoutId = setTimeout(function () {\n        _this._hide();\n      }, 500);\n    },\n    _hide: function _hide() {\n      var $bar = this.$bar;\n      $bar.remove(); // 修改状态\n\n      this._time = 0;\n      this._isShow = false;\n      this._isRender = false;\n    }\n  };\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  };\n  /*\n      上传图片\n  */\n  // 构造函数\n\n\n  function UploadImg(editor) {\n    this.editor = editor;\n  } // 原型\n\n\n  UploadImg.prototype = {\n    constructor: UploadImg,\n    // 根据 debug 弹出不同的信息\n    _alert: function _alert(alertInfo, debugInfo) {\n      var editor = this.editor;\n      var debug = editor.config.debug;\n      var customAlert = editor.config.customAlert;\n\n      if (debug) {\n        throw new Error('wangEditor: ' + (debugInfo || alertInfo));\n      } else {\n        if (customAlert && typeof customAlert === 'function') {\n          customAlert(alertInfo);\n        } else {\n          alert(alertInfo);\n        }\n      }\n    },\n    // 根据链接插入图片\n    insertLinkImg: function insertLinkImg(link) {\n      var _this2 = this;\n\n      if (!link) {\n        return;\n      }\n\n      var editor = this.editor;\n      var config = editor.config; // 校验格式\n\n      var linkImgCheck = config.linkImgCheck;\n      var checkResult = void 0;\n\n      if (linkImgCheck && typeof linkImgCheck === 'function') {\n        checkResult = linkImgCheck(link);\n\n        if (typeof checkResult === 'string') {\n          // 校验失败，提示信息\n          alert(checkResult);\n          return;\n        }\n      }\n\n      editor.cmd.do('insertHTML', '<img src=\"' + link + '\" style=\"max-width:100%;\"/>'); // 验证图片 url 是否有效，无效的话给出提示\n\n      var img = document.createElement('img');\n\n      img.onload = function () {\n        var callback = config.linkImgCallback;\n\n        if (callback && typeof callback === 'function') {\n          callback(link);\n        }\n\n        img = null;\n      };\n\n      img.onerror = function () {\n        img = null; // 无法成功下载图片\n\n        _this2._alert('插入图片错误', \"wangEditor: \\u63D2\\u5165\\u56FE\\u7247\\u51FA\\u9519\\uFF0C\\u56FE\\u7247\\u94FE\\u63A5\\u662F \\\"\" + link + \"\\\"\\uFF0C\\u4E0B\\u8F7D\\u8BE5\\u94FE\\u63A5\\u5931\\u8D25\");\n\n        return;\n      };\n\n      img.onabort = function () {\n        img = null;\n      };\n\n      img.src = link;\n    },\n    // 上传图片\n    uploadImg: function uploadImg(files) {\n      var _this3 = this;\n\n      if (!files || !files.length) {\n        return;\n      } // ------------------------------ 获取配置信息 ------------------------------\n\n\n      var editor = this.editor;\n      var config = editor.config;\n      var uploadImgServer = config.uploadImgServer;\n      var uploadImgShowBase64 = config.uploadImgShowBase64;\n      var maxSize = config.uploadImgMaxSize;\n      var maxSizeM = maxSize / 1024 / 1024;\n      var maxLength = config.uploadImgMaxLength || 10000;\n      var uploadFileName = config.uploadFileName || '';\n      var uploadImgParams = config.uploadImgParams || {};\n      var uploadImgParamsWithUrl = config.uploadImgParamsWithUrl;\n      var uploadImgHeaders = config.uploadImgHeaders || {};\n      var hooks = config.uploadImgHooks || {};\n      var timeout = config.uploadImgTimeout || 3000;\n      var withCredentials = config.withCredentials;\n\n      if (withCredentials == null) {\n        withCredentials = false;\n      }\n\n      var customUploadImg = config.customUploadImg;\n\n      if (!customUploadImg) {\n        // 没有 customUploadImg 的情况下，需要如下两个配置才能继续进行图片上传\n        if (!uploadImgServer && !uploadImgShowBase64) {\n          return;\n        }\n      } // ------------------------------ 验证文件信息 ------------------------------\n\n\n      var resultFiles = [];\n      var errInfo = [];\n      arrForEach(files, function (file) {\n        var name = file.name;\n        var size = file.size; // chrome 低版本 name === undefined\n\n        if (!name || !size) {\n          return;\n        }\n\n        if (/\\.(jpg|jpeg|png|bmp|gif|webp)$/i.test(name) === false) {\n          // 后缀名不合法，不是图片\n          errInfo.push(\"\\u3010\" + name + \"\\u3011\\u4E0D\\u662F\\u56FE\\u7247\");\n          return;\n        }\n\n        if (maxSize < size) {\n          // 上传图片过大\n          errInfo.push(\"\\u3010\" + name + \"\\u3011\\u5927\\u4E8E \" + maxSizeM + 'M');\n          return;\n        } // 验证通过的加入结果列表\n\n\n        resultFiles.push(file);\n      }); // 抛出验证信息\n\n      if (errInfo.length) {\n        this._alert('图片验证未通过: \\n' + errInfo.join('\\n'));\n\n        return;\n      }\n\n      if (resultFiles.length > maxLength) {\n        this._alert('一次最多上传' + maxLength + '张图片');\n\n        return;\n      } // ------------------------------ 自定义上传 ------------------------------\n\n\n      if (customUploadImg && typeof customUploadImg === 'function') {\n        customUploadImg(resultFiles, this.insertLinkImg.bind(this)); // 阻止以下代码执行\n\n        return;\n      } // 添加图片数据\n\n\n      var formdata = new FormData();\n      arrForEach(resultFiles, function (file) {\n        var name = uploadFileName || file.name;\n        formdata.append(name, file);\n      }); // ------------------------------ 上传图片 ------------------------------\n\n      if (uploadImgServer && typeof uploadImgServer === 'string') {\n        // 添加参数\n        var uploadImgServerArr = uploadImgServer.split('#');\n        uploadImgServer = uploadImgServerArr[0];\n        var uploadImgServerHash = uploadImgServerArr[1] || '';\n        objForEach(uploadImgParams, function (key, val) {\n          // 因使用者反应，自定义参数不能默认 encode ，由 v3.1.1 版本开始注释掉\n          // val = encodeURIComponent(val)\n          // 第一，将参数拼接到 url 中\n          if (uploadImgParamsWithUrl) {\n            if (uploadImgServer.indexOf('?') > 0) {\n              uploadImgServer += '&';\n            } else {\n              uploadImgServer += '?';\n            }\n\n            uploadImgServer = uploadImgServer + key + '=' + val;\n          } // 第二，将参数添加到 formdata 中\n\n\n          formdata.append(key, val);\n        });\n\n        if (uploadImgServerHash) {\n          uploadImgServer += '#' + uploadImgServerHash;\n        } // 定义 xhr\n\n\n        var xhr = new XMLHttpRequest();\n        xhr.open('POST', uploadImgServer); // 设置超时\n\n        xhr.timeout = timeout;\n\n        xhr.ontimeout = function () {\n          // hook - timeout\n          if (hooks.timeout && typeof hooks.timeout === 'function') {\n            hooks.timeout(xhr, editor);\n          }\n\n          _this3._alert('上传图片超时');\n        }; // 监控 progress\n\n\n        if (xhr.upload) {\n          xhr.upload.onprogress = function (e) {\n            var percent = void 0; // 进度条\n\n            var progressBar = new Progress(editor);\n\n            if (e.lengthComputable) {\n              percent = e.loaded / e.total;\n              progressBar.show(percent);\n            }\n          };\n        } // 返回数据\n\n\n        xhr.onreadystatechange = function () {\n          var result = void 0;\n\n          if (xhr.readyState === 4) {\n            if (xhr.status < 200 || xhr.status >= 300) {\n              // hook - error\n              if (hooks.error && typeof hooks.error === 'function') {\n                hooks.error(xhr, editor);\n              } // xhr 返回状态错误\n\n\n              _this3._alert('上传图片发生错误', \"\\u4E0A\\u4F20\\u56FE\\u7247\\u53D1\\u751F\\u9519\\u8BEF\\uFF0C\\u670D\\u52A1\\u5668\\u8FD4\\u56DE\\u72B6\\u6001\\u662F \" + xhr.status);\n\n              return;\n            }\n\n            result = xhr.responseText;\n\n            if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) !== 'object') {\n              try {\n                result = JSON.parse(result);\n              } catch (ex) {\n                // hook - fail\n                if (hooks.fail && typeof hooks.fail === 'function') {\n                  hooks.fail(xhr, editor, result);\n                }\n\n                _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果是: ' + result);\n\n                return;\n              }\n            }\n\n            if (!hooks.customInsert && result.errno != '0') {\n              // hook - fail\n              if (hooks.fail && typeof hooks.fail === 'function') {\n                hooks.fail(xhr, editor, result);\n              } // 数据错误\n\n\n              _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果 errno=' + result.errno);\n            } else {\n              if (hooks.customInsert && typeof hooks.customInsert === 'function') {\n                // 使用者自定义插入方法\n                hooks.customInsert(_this3.insertLinkImg.bind(_this3), result, editor);\n              } else {\n                // 将图片插入编辑器\n                var data = result.data || [];\n                data.forEach(function (link) {\n                  _this3.insertLinkImg(link);\n                });\n              } // hook - success\n\n\n              if (hooks.success && typeof hooks.success === 'function') {\n                hooks.success(xhr, editor, result);\n              }\n            }\n          }\n        }; // hook - before\n\n\n        if (hooks.before && typeof hooks.before === 'function') {\n          var beforeResult = hooks.before(xhr, editor, resultFiles);\n\n          if (beforeResult && (typeof beforeResult === 'undefined' ? 'undefined' : _typeof(beforeResult)) === 'object') {\n            if (beforeResult.prevent) {\n              // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n              this._alert(beforeResult.msg);\n\n              return;\n            }\n          }\n        } // 自定义 headers\n\n\n        objForEach(uploadImgHeaders, function (key, val) {\n          xhr.setRequestHeader(key, val);\n        }); // 跨域传 cookie\n\n        xhr.withCredentials = withCredentials; // 发送请求\n\n        xhr.send(formdata); // 注意，要 return 。不去操作接下来的 base64 显示方式\n\n        return;\n      } // ------------------------------ 显示 base64 格式 ------------------------------\n\n\n      if (uploadImgShowBase64) {\n        arrForEach(files, function (file) {\n          var _this = _this3;\n          var reader = new FileReader();\n          reader.readAsDataURL(file);\n\n          reader.onload = function () {\n            _this.insertLinkImg(this.result);\n          };\n        });\n      }\n    }\n  };\n  /*\n      编辑器构造函数\n  */\n  // id，累加\n\n  var editorId = 1; // 构造函数\n\n  function Editor(toolbarSelector, textSelector) {\n    if (toolbarSelector == null) {\n      // 没有传入任何参数，报错\n      throw new Error('错误：初始化编辑器时候未传入任何参数，请查阅文档');\n    } // id，用以区分单个页面不同的编辑器对象\n\n\n    this.id = 'wangEditor-' + editorId++;\n    this.toolbarSelector = toolbarSelector;\n    this.textSelector = textSelector; // 自定义配置\n\n    this.customConfig = {};\n  } // 修改原型\n\n\n  Editor.prototype = {\n    constructor: Editor,\n    // 初始化配置\n    _initConfig: function _initConfig() {\n      // _config 是默认配置，this.customConfig 是用户自定义配置，将它们 merge 之后再赋值\n      var target = {};\n      this.config = Object.assign(target, config, this.customConfig); // 将语言配置，生成正则表达式\n\n      var langConfig = this.config.lang || {};\n      var langArgs = [];\n      objForEach(langConfig, function (key, val) {\n        // key 即需要生成正则表达式的规则，如“插入链接”\n        // val 即需要被替换成的语言，如“insert link”\n        langArgs.push({\n          reg: new RegExp(key, 'img'),\n          val: val\n        });\n      });\n      this.config.langArgs = langArgs;\n    },\n    // 初始化 DOM\n    _initDom: function _initDom() {\n      var _this = this;\n\n      var toolbarSelector = this.toolbarSelector;\n      var $toolbarSelector = $(toolbarSelector);\n      var textSelector = this.textSelector;\n      var config$$1 = this.config;\n      var zIndex = config$$1.zIndex; // 定义变量\n\n      var $toolbarElem = void 0,\n          $textContainerElem = void 0,\n          $textElem = void 0,\n          $children = void 0;\n\n      if (textSelector == null) {\n        // 只传入一个参数，即是容器的选择器或元素，toolbar 和 text 的元素自行创建\n        $toolbarElem = $('<div></div>');\n        $textContainerElem = $('<div></div>'); // 将编辑器区域原有的内容，暂存起来\n\n        $children = $toolbarSelector.children(); // 添加到 DOM 结构中\n\n        $toolbarSelector.append($toolbarElem).append($textContainerElem); // 自行创建的，需要配置默认的样式\n\n        $toolbarElem.css('background-color', '#f1f1f1').css('border', '1px solid #ccc');\n        $textContainerElem.css('border', '1px solid #ccc').css('border-top', 'none').css('height', '300px');\n      } else {\n        // toolbar 和 text 的选择器都有值，记录属性\n        $toolbarElem = $toolbarSelector;\n        $textContainerElem = $(textSelector); // 将编辑器区域原有的内容，暂存起来\n\n        $children = $textContainerElem.children();\n      } // 编辑区域\n\n\n      $textElem = $('<div></div>');\n      $textElem.attr('contenteditable', 'true').css('width', '100%').css('height', '100%'); // 初始化编辑区域内容\n\n      if ($children && $children.length) {\n        $textElem.append($children);\n      } else {\n        $textElem.append($('<p><br></p>'));\n      } // 编辑区域加入DOM\n\n\n      $textContainerElem.append($textElem); // 设置通用的 class\n\n      $toolbarElem.addClass('w-e-toolbar');\n      $textContainerElem.addClass('w-e-text-container');\n      $textContainerElem.css('z-index', zIndex);\n      $textElem.addClass('w-e-text'); // 添加 ID\n\n      var toolbarElemId = getRandom('toolbar-elem');\n      $toolbarElem.attr('id', toolbarElemId);\n      var textElemId = getRandom('text-elem');\n      $textElem.attr('id', textElemId); // 记录属性\n\n      this.$toolbarElem = $toolbarElem;\n      this.$textContainerElem = $textContainerElem;\n      this.$textElem = $textElem;\n      this.toolbarElemId = toolbarElemId;\n      this.textElemId = textElemId; // 记录输入法的开始和结束\n\n      var compositionEnd = true;\n      $textContainerElem.on('compositionstart', function () {\n        // 输入法开始输入\n        compositionEnd = false;\n      });\n      $textContainerElem.on('compositionend', function () {\n        // 输入法结束输入\n        compositionEnd = true;\n      }); // 绑定 onchange\n\n      $textContainerElem.on('click keyup', function () {\n        // 输入法结束才出发 onchange\n        compositionEnd && _this.change && _this.change();\n      });\n      $toolbarElem.on('click', function () {\n        this.change && this.change();\n      }); //绑定 onfocus 与 onblur 事件\n\n      if (config$$1.onfocus || config$$1.onblur) {\n        // 当前编辑器是否是焦点状态\n        this.isFocus = false;\n        $(document).on('click', function (e) {\n          //判断当前点击元素是否在编辑器内\n          var isChild = $textElem.isContain($(e.target)); //判断当前点击元素是否为工具栏\n\n          var isToolbar = $toolbarElem.isContain($(e.target));\n          var isMenu = $toolbarElem[0] == e.target ? true : false;\n\n          if (!isChild) {\n            //若为选择工具栏中的功能，则不视为成blur操作\n            if (isToolbar && !isMenu) {\n              return;\n            }\n\n            if (_this.isFocus) {\n              _this.onblur && _this.onblur();\n            }\n\n            _this.isFocus = false;\n          } else {\n            if (!_this.isFocus) {\n              _this.onfocus && _this.onfocus();\n            }\n\n            _this.isFocus = true;\n          }\n        });\n      }\n    },\n    // 封装 command\n    _initCommand: function _initCommand() {\n      this.cmd = new Command(this);\n    },\n    // 封装 selection range API\n    _initSelectionAPI: function _initSelectionAPI() {\n      this.selection = new API(this);\n    },\n    // 添加图片上传\n    _initUploadImg: function _initUploadImg() {\n      this.uploadImg = new UploadImg(this);\n    },\n    // 初始化菜单\n    _initMenus: function _initMenus() {\n      this.menus = new Menus(this);\n      this.menus.init();\n    },\n    // 添加 text 区域\n    _initText: function _initText() {\n      this.txt = new Text(this);\n      this.txt.init();\n    },\n    // 初始化选区，将光标定位到内容尾部\n    initSelection: function initSelection(newLine) {\n      var $textElem = this.$textElem;\n      var $children = $textElem.children();\n\n      if (!$children.length) {\n        // 如果编辑器区域无内容，添加一个空行，重新设置选区\n        $textElem.append($('<p><br></p>'));\n        this.initSelection();\n        return;\n      }\n\n      var $last = $children.last();\n\n      if (newLine) {\n        // 新增一个空行\n        var html = $last.html().toLowerCase();\n        var nodeName = $last.getNodeName();\n\n        if (html !== '<br>' && html !== '<br\\/>' || nodeName !== 'P') {\n          // 最后一个元素不是 <p><br></p>，添加一个空行，重新设置选区\n          $textElem.append($('<p><br></p>'));\n          this.initSelection();\n          return;\n        }\n      }\n\n      this.selection.createRangeByElem($last, false, true);\n      this.selection.restoreSelection();\n    },\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n      // -------- 绑定 onchange 事件 --------\n      var onChangeTimeoutId = 0;\n      var beforeChangeHtml = this.txt.html();\n      var config$$1 = this.config; // onchange 触发延迟时间\n\n      var onchangeTimeout = config$$1.onchangeTimeout;\n      onchangeTimeout = parseInt(onchangeTimeout, 10);\n\n      if (!onchangeTimeout || onchangeTimeout <= 0) {\n        onchangeTimeout = 200;\n      }\n\n      var onchange = config$$1.onchange;\n\n      if (onchange && typeof onchange === 'function') {\n        // 触发 change 的有三个场景：\n        // 1. $textContainerElem.on('click keyup')\n        // 2. $toolbarElem.on('click')\n        // 3. editor.cmd.do()\n        this.change = function () {\n          // 判断是否有变化\n          var currentHtml = this.txt.html();\n\n          if (currentHtml.length === beforeChangeHtml.length) {\n            // 需要比较每一个字符\n            if (currentHtml === beforeChangeHtml) {\n              return;\n            }\n          } // 执行，使用节流\n\n\n          if (onChangeTimeoutId) {\n            clearTimeout(onChangeTimeoutId);\n          }\n\n          onChangeTimeoutId = setTimeout(function () {\n            // 触发配置的 onchange 函数\n            onchange(currentHtml);\n            beforeChangeHtml = currentHtml;\n          }, onchangeTimeout);\n        };\n      } // -------- 绑定 onblur 事件 --------\n\n\n      var onblur = config$$1.onblur;\n\n      if (onblur && typeof onblur === 'function') {\n        this.onblur = function () {\n          var currentHtml = this.txt.html();\n          onblur(currentHtml);\n        };\n      } // -------- 绑定 onfocus 事件 --------\n\n\n      var onfocus = config$$1.onfocus;\n\n      if (onfocus && typeof onfocus === 'function') {\n        this.onfocus = function () {\n          onfocus();\n        };\n      }\n    },\n    // 创建编辑器\n    create: function create() {\n      // 初始化配置信息\n      this._initConfig(); // 初始化 DOM\n\n\n      this._initDom(); // 封装 command API\n\n\n      this._initCommand(); // 封装 selection range API\n\n\n      this._initSelectionAPI(); // 添加 text\n\n\n      this._initText(); // 初始化菜单\n\n\n      this._initMenus(); // 添加 图片上传\n\n\n      this._initUploadImg(); // 初始化选区，将光标定位到内容尾部\n\n\n      this.initSelection(true); // 绑定事件\n\n      this._bindEvent();\n    },\n    // 解绑所有事件（暂时不对外开放）\n    _offAllEvent: function _offAllEvent() {\n      $.offAll();\n    }\n  }; // 检验是否浏览器环境\n\n  try {\n    document;\n  } catch (ex) {\n    throw new Error('请在浏览器环境下运行');\n  } // polyfill\n\n\n  polyfill(); // 这里的 `inlinecss` 将被替换成 css 代码的内容，详情可去 ./gulpfile.js 中搜索 `inlinecss` 关键字\n\n  var inlinecss = '.w-e-toolbar,.w-e-text-container,.w-e-menu-panel {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-toolbar *,.w-e-text-container *,.w-e-menu-panel * {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-clear-fix:after {  content: \"\";  display: table;  clear: both;}.w-e-toolbar .w-e-droplist {  position: absolute;  left: 0;  top: 0;  background-color: #fff;  border: 1px solid #f1f1f1;  border-right-color: #ccc;  border-bottom-color: #ccc;}.w-e-toolbar .w-e-droplist .w-e-dp-title {  text-align: center;  color: #999;  line-height: 2;  border-bottom: 1px solid #f1f1f1;  font-size: 13px;}.w-e-toolbar .w-e-droplist ul.w-e-list {  list-style: none;  line-height: 1;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item {  color: #333;  padding: 5px 0;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item:hover {  background-color: #f1f1f1;}.w-e-toolbar .w-e-droplist ul.w-e-block {  list-style: none;  text-align: left;  padding: 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item {  display: inline-block;  *display: inline;  *zoom: 1;  padding: 3px 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item:hover {  background-color: #f1f1f1;}@font-face {  font-family: \\'w-e-icon\\';  src: url(data:application/x-font-woff;charset=utf-8;base64,) format(\\'truetype\\');  font-weight: normal;  font-style: normal;}[class^=\"w-e-icon-\"],[class*=\" w-e-icon-\"] {  /* use !important to prevent issues with browser extensions that change fonts */  font-family: \\'w-e-icon\\' !important;  speak: none;  font-style: normal;  font-weight: normal;  font-variant: normal;  text-transform: none;  line-height: 1;  /* Better Font Rendering =========== */  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.w-e-icon-close:before {  content: \"\\\\f00d\";}.w-e-icon-upload2:before {  content: \"\\\\e9c6\";}.w-e-icon-trash-o:before {  content: \"\\\\f014\";}.w-e-icon-header:before {  content: \"\\\\f1dc\";}.w-e-icon-pencil2:before {  content: \"\\\\e906\";}.w-e-icon-paint-brush:before {  content: \"\\\\f1fc\";}.w-e-icon-image:before {  content: \"\\\\e90d\";}.w-e-icon-play:before {  content: \"\\\\e912\";}.w-e-icon-location:before {  content: \"\\\\e947\";}.w-e-icon-undo:before {  content: \"\\\\e965\";}.w-e-icon-redo:before {  content: \"\\\\e966\";}.w-e-icon-quotes-left:before {  content: \"\\\\e977\";}.w-e-icon-list-numbered:before {  content: \"\\\\e9b9\";}.w-e-icon-list2:before {  content: \"\\\\e9bb\";}.w-e-icon-link:before {  content: \"\\\\e9cb\";}.w-e-icon-happy:before {  content: \"\\\\e9df\";}.w-e-icon-bold:before {  content: \"\\\\ea62\";}.w-e-icon-underline:before {  content: \"\\\\ea63\";}.w-e-icon-italic:before {  content: \"\\\\ea64\";}.w-e-icon-strikethrough:before {  content: \"\\\\ea65\";}.w-e-icon-table2:before {  content: \"\\\\ea71\";}.w-e-icon-paragraph-left:before {  content: \"\\\\ea77\";}.w-e-icon-paragraph-center:before {  content: \"\\\\ea78\";}.w-e-icon-paragraph-right:before {  content: \"\\\\ea79\";}.w-e-icon-terminal:before {  content: \"\\\\f120\";}.w-e-icon-page-break:before {  content: \"\\\\ea68\";}.w-e-icon-cancel-circle:before {  content: \"\\\\ea0d\";}.w-e-icon-font:before {  content: \"\\\\ea5c\";}.w-e-icon-text-heigh:before {  content: \"\\\\ea5f\";}.w-e-toolbar {  display: -webkit-box;  display: -ms-flexbox;  display: flex;  padding: 0 5px;  /* flex-wrap: wrap; */  /* 单个菜单 */}.w-e-toolbar .w-e-menu {  position: relative;  text-align: center;  padding: 5px 10px;  cursor: pointer;}.w-e-toolbar .w-e-menu i {  color: #999;}.w-e-toolbar .w-e-menu:hover i {  color: #333;}.w-e-toolbar .w-e-active i {  color: #1e88e5;}.w-e-toolbar .w-e-active:hover i {  color: #1e88e5;}.w-e-text-container .w-e-panel-container {  position: absolute;  top: 0;  left: 50%;  border: 1px solid #ccc;  border-top: 0;  box-shadow: 1px 1px 2px #ccc;  color: #333;  background-color: #fff;  /* 为 emotion panel 定制的样式 */  /* 上传图片的 panel 定制样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-close {  position: absolute;  right: 0;  top: 0;  padding: 5px;  margin: 2px 5px 0 0;  cursor: pointer;  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-close:hover {  color: #333;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title {  list-style: none;  display: -webkit-box;  display: -ms-flexbox;  display: flex;  font-size: 14px;  margin: 2px 10px 0 10px;  border-bottom: 1px solid #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-item {  padding: 3px 5px;  color: #999;  cursor: pointer;  margin: 0 3px;  position: relative;  top: 1px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-active {  color: #333;  border-bottom: 1px solid #333;  cursor: default;  font-weight: 700;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content {  padding: 10px 15px 10px 15px;  font-size: 16px;  /* 输入框的样式 */  /* 按钮的样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content button:focus {  outline: none;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea {  width: 100%;  border: 1px solid #ccc;  padding: 5px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus {  border-color: #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text] {  border: none;  border-bottom: 1px solid #ccc;  font-size: 14px;  height: 20px;  color: #333;  text-align: left;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].small {  width: 30px;  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].block {  display: block;  width: 100%;  margin: 10px 0;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text]:focus {  border-bottom: 2px solid #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button {  font-size: 14px;  color: #1e88e5;  border: none;  padding: 5px 10px;  background-color: #fff;  cursor: pointer;  border-radius: 3px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.left {  float: left;  margin-right: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.right {  float: right;  margin-left: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.gray {  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.red {  color: #c24f4a;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button:hover {  background-color: #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container:after {  content: \"\";  display: table;  clear: both;}.w-e-text-container .w-e-panel-container .w-e-emoticon-container .w-e-item {  cursor: pointer;  font-size: 18px;  padding: 0 3px;  display: inline-block;  *display: inline;  *zoom: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container {  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn {  display: inline-block;  *display: inline;  *zoom: 1;  color: #999;  cursor: pointer;  font-size: 60px;  line-height: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn:hover {  color: #333;}.w-e-text-container {  position: relative;}.w-e-text-container .w-e-progress {  position: absolute;  background-color: #1e88e5;  bottom: 0;  left: 0;  height: 1px;}.w-e-text {  padding: 0 10px;  overflow-y: scroll;}.w-e-text p,.w-e-text h1,.w-e-text h2,.w-e-text h3,.w-e-text h4,.w-e-text h5,.w-e-text table,.w-e-text pre {  margin: 10px 0;  line-height: 1.5;}.w-e-text ul,.w-e-text ol {  margin: 10px 0 10px 20px;}.w-e-text blockquote {  display: block;  border-left: 8px solid #d0e5f2;  padding: 5px 10px;  margin: 10px 0;  line-height: 1.4;  font-size: 100%;  background-color: #f1f1f1;}.w-e-text code {  display: inline-block;  *display: inline;  *zoom: 1;  background-color: #f1f1f1;  border-radius: 3px;  padding: 3px 5px;  margin: 0 3px;}.w-e-text pre code {  display: block;}.w-e-text table {  border-top: 1px solid #ccc;  border-left: 1px solid #ccc;}.w-e-text table td,.w-e-text table th {  border-bottom: 1px solid #ccc;  border-right: 1px solid #ccc;  padding: 3px 5px;}.w-e-text table th {  border-bottom: 2px solid #ccc;  text-align: center;}.w-e-text:focus {  outline: none;}.w-e-text img {  cursor: pointer;}.w-e-text img:hover {  box-shadow: 0 0 5px #333;}'; // 将 css 代码添加到 <style> 中\n\n  var style = document.createElement('style');\n  style.type = 'text/css';\n  style.innerHTML = inlinecss;\n  document.getElementsByTagName('HEAD').item(0).appendChild(style); // 返回\n\n  var index = window.wangEditor || Editor;\n  return index;\n});","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _CheckOutlined = _interopRequireDefault(require('./lib/icons/CheckOutlined'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _default = _CheckOutlined;\nexports.default = _default;\nmodule.exports = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _CheckOutlined = _interopRequireDefault(require(\"@ant-design/icons-svg/lib/asn/CheckOutlined\"));\n\nvar _AntdIcon = _interopRequireDefault(require(\"../components/AntdIcon\")); // GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\n\nvar CheckOutlined = function CheckOutlined(props, ref) {\n  return React.createElement(_AntdIcon.default, Object.assign({}, props, {\n    ref: ref,\n    icon: _CheckOutlined.default\n  }));\n};\n\nCheckOutlined.displayName = 'CheckOutlined';\n\nvar _default = React.forwardRef(CheckOutlined);\n\nexports.default = _default;","\"use strict\"; // This icon file is generated automatically.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar CheckOutlined = {\n  \"icon\": {\n    \"tag\": \"svg\",\n    \"attrs\": {\n      \"viewBox\": \"64 64 896 896\",\n      \"focusable\": \"false\"\n    },\n    \"children\": [{\n      \"tag\": \"path\",\n      \"attrs\": {\n        \"d\": \"M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z\"\n      }\n    }]\n  },\n  \"name\": \"check\",\n  \"theme\": \"outlined\"\n};\nexports.default = CheckOutlined;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _EyeOutlined = _interopRequireDefault(require('./lib/icons/EyeOutlined'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _default = _EyeOutlined;\nexports.default = _default;\nmodule.exports = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _EyeOutlined = _interopRequireDefault(require(\"@ant-design/icons-svg/lib/asn/EyeOutlined\"));\n\nvar _AntdIcon = _interopRequireDefault(require(\"../components/AntdIcon\")); // GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\n\nvar EyeOutlined = function EyeOutlined(props, ref) {\n  return React.createElement(_AntdIcon.default, Object.assign({}, props, {\n    ref: ref,\n    icon: _EyeOutlined.default\n  }));\n};\n\nEyeOutlined.displayName = 'EyeOutlined';\n\nvar _default = React.forwardRef(EyeOutlined);\n\nexports.default = _default;","\"use strict\"; // This icon file is generated automatically.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar EyeOutlined = {\n  \"icon\": {\n    \"tag\": \"svg\",\n    \"attrs\": {\n      \"viewBox\": \"64 64 896 896\",\n      \"focusable\": \"false\"\n    },\n    \"children\": [{\n      \"tag\": \"path\",\n      \"attrs\": {\n        \"d\": \"M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z\"\n      }\n    }]\n  },\n  \"name\": \"eye\",\n  \"theme\": \"outlined\"\n};\nexports.default = EyeOutlined;"],"sourceRoot":""}