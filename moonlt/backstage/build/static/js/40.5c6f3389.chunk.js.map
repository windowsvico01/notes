{"version":3,"sources":["containers/Pages/Manage/Forum/List/sagas.js","containers/Pages/Manage/Forum/List/actions.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/regenerator-runtime/runtime.js"],"names":["handleLoadForumList","watcher","action","formData","_action$params","cid","fid","name","_action$params$page","page","options","result","_Users_yangpu_bt_notes_moonlt_backstage_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","FormData","params","append","method","body","call","fetchData","url","sent","put","loadForumListSuccess","stop","_marked","_context2","takeLatest","LOAD_FORUMLIST","_marked2","__webpack_exports__","__webpack_require__","r","d","LOAD_FORUMLIST_SUCCESS","ADD","FIELDS_CHANGE","MODAL_VISIBLE_TOGGLE","UPDATE_CATEGORY","add","loadForumList","fieldsChange","modalVisibleToggle","updateCategory","type","data","fields","editCid","bool","module","exports","runtime","undefined","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","GenStateSuspendedStart","arg","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","_sent","dispatchException","abrupt","record","tryCatch","done","GenStateSuspendedYield","value","makeInvokeMethod","fn","obj","err","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","__await","then","unwrapped","error","TypeError","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","constructor","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","toString","keys","object","key","reverse","pop","skipTempReset","charAt","slice","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function"],"mappings":"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","file":"static/js/40.5c6f3389.chunk.js","sourcesContent":["import { fork, call, put, takeLatest, takeEvery } from 'redux-saga/effects';\nimport fetchData from '@/containers/App/sagas/fetchData';\nimport { LOAD_FORUMLIST, loadForumListSuccess } from './actions';\n// export function* handleAddCategory(action) {\n//   const { params } = action;\n//   const formData = new FormData();\n//   Object.keys(params).forEach((key) => {\n//     if (params[key] === undefined) return;\n//     formData.append(key, params[key]);\n//   })\n//   const options = {\n//     method: 'POST',\n//     body: formData,\n//   }\n//   const result = yield call(fetchData, { url: '/content/addCategory', options });\n//   if (result) {\n//     yield put(loadCategory());\n//     yield put(modalVisibleToggle(false));\n//   }\n// }\nexport function* handleLoadForumList(action) {\n  const formData = new FormData();\n  const { cid, fid, name, page = 1 } = action.params;\n  cid && formData.append('cid', cid);\n  fid && formData.append('fid', fid);\n  name && formData.append('name', name);\n  formData.append('page', page);\n  formData.append('limit', 20);\n  const options = {\n    method: 'POST',\n    body: formData,\n  }\n  const result = yield call(fetchData, { url: '/content/getForum', options });\n  if (result) {\n    yield put(loadForumListSuccess(result));\n  }\n}\n// export function* handleUpdateCategory(action) {\n//   const { params } = action;\n//   const formData = new FormData();\n//   Object.keys(params).forEach((key) => {\n//     if (params[key] === '') return;\n//     formData.append(key, params[key]);\n//   })\n//   const options = {\n//     method: 'POST',\n//     body: formData,\n//   }\n//   const result = yield call(fetchData, { url: '/content/updateCategory', options });\n//   if (result) {\n//     yield put(modalVisibleToggle(false)); // 清空)\n//     yield put(loadCategory());\n//   }\n// }\nexport function* watcher() {\n  // yield takeLatest(ADD_CATEGORY, handleAddCategory)\n  yield takeLatest(LOAD_FORUMLIST, handleLoadForumList)\n  // yield takeLatest(UPDATE_CATEGORY, handleUpdateCategory)\n}\n\nexport default [\n  watcher,\n];\n","export const LOAD_FORUMLIST = '/Manage/Forum/List/LOAD_FORUMLIST';\nexport const LOAD_FORUMLIST_SUCCESS = '/Manage/Forum/List/LOAD_FORUMLIST_SUCCESS';\n\nexport const ADD = '/Manage/Category/List/ADD';\n\nexport const FIELDS_CHANGE = '/Manage/Category/List/FIELDS_CHANGE';\n\nexport const MODAL_VISIBLE_TOGGLE = '/Manage/Category/List/MODAL_VISIBLE_TOGGLE';\n\nexport const UPDATE_CATEGORY = '/Manage/Category/List/UPDATE_CATEGORY';\n\nexport function add(params) {\n  return {\n    type: ADD,\n    params,\n  };\n}\n\nexport function loadForumList(params) {\n  return {\n    type: LOAD_FORUMLIST,\n    params\n  };\n}\n\nexport function loadForumListSuccess(data) {\n  return {\n    type: LOAD_FORUMLIST_SUCCESS,\n    data,\n  };\n}\n\nexport function fieldsChange(fields, editCid) {\n  return {\n    type: FIELDS_CHANGE,\n    fields,\n    editCid,\n  }\n}\n\nexport function modalVisibleToggle(bool, editCid) {\n  return {\n    type: MODAL_VISIBLE_TOGGLE,\n    bool,\n    editCid,\n  }\n}\n\nexport function updateCategory(params) {\n  return {\n    type: UPDATE_CATEGORY,\n    params,\n  }\n}\n\n","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar runtime = function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n\n\n  var IteratorPrototype = {};\n\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\"; // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      prototype[method] = function (arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n\n  exports.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n\n\n  exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function (value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function (err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n\n  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  } // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n      context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    } // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n\n\n    context.delegate = null;\n    return ContinueSentinel;\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n  Gp[toStringTagSymbol] = \"Generator\"; // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n  Gp[iteratorSymbol] = function () {\n    return this;\n  };\n\n  Gp.toString = function () {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  exports.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      this.prev = 0;\n      this.next = 0; // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = \"next\";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function stop() {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  }; // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n\n  return exports;\n}( // If this script is executing as a CommonJS module, use module.exports\n// as the regeneratorRuntime namespace. Otherwise create a new empty\n// object. Either way, the resulting object will be used to initialize\n// the regeneratorRuntime variable at the top of this file.\ntypeof module === \"object\" ? module.exports : {});\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}"],"sourceRoot":""}